[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Spatial: Networks, Interaction, & Econometrics for Migration",
    "section": "",
    "text": "1 Install and Run\nNERSA/NARSC Program in Mobility, Migration & Regional Science\nTo run locally:\nTo run in codespaces:\nif running in a codespace this starts a jupyter server on the VM’s ‘localhost’. Open an existing notebook (or start a new one). When selecting a kernel, choose ‘Existing jupyter server’ and copy/paste the URL with token from the terminal\nedit the notebooks as you like\nif you want to use the jupyterlab interface instead of VSCode:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Install and Run</span>"
    ]
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Spatial: Networks, Interaction, & Econometrics for Migration",
    "section": "2.1 Overview",
    "text": "2.1 Overview\n\nspatial data and analysis in python\nencoding spatial relationships\nmodel flows via spatial interaction\nmodel flows via spatial econometric interaction",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Install and Run</span>"
    ]
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Spatial: Networks, Interaction, & Econometrics for Migration",
    "section": "2.2 Introduction",
    "text": "2.2 Introduction\nopen source and open science\n\npixi & conda\njupyter\npython\npython\npysal\ngeosnap",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Install and Run</span>"
    ]
  },
  {
    "objectID": "index.html#spatial-data-in-python",
    "href": "index.html#spatial-data-in-python",
    "title": "Spatial: Networks, Interaction, & Econometrics for Migration",
    "section": "2.3 spatial data in python",
    "text": "2.3 spatial data in python\n\npandas\nnumpy\nshapely\ngeopandas\ncensus and lodes",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Install and Run</span>"
    ]
  },
  {
    "objectID": "index.html#spatial-graphs",
    "href": "index.html#spatial-graphs",
    "title": "Spatial: Networks, Interaction, & Econometrics for Migration",
    "section": "2.4 spatial graphs",
    "text": "2.4 spatial graphs\nencoding relationships between spatial objects\n\ncontiguity\nk-nearest neighbors\ndistance\nflows",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Install and Run</span>"
    ]
  },
  {
    "objectID": "index.html#spatial-interaction-models",
    "href": "index.html#spatial-interaction-models",
    "title": "Spatial: Networks, Interaction, & Econometrics for Migration",
    "section": "2.5 spatial interaction models",
    "text": "2.5 spatial interaction models\nmodeling the flow between \\(o\\) and \\(d\\) as a function of push and pull factors\n\ngravity model (unconstrained)\nattraction constrained\nproduction constrained\ndoubly constrained",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Install and Run</span>"
    ]
  },
  {
    "objectID": "index.html#spatial-econometric-models",
    "href": "index.html#spatial-econometric-models",
    "title": "Spatial: Networks, Interaction, & Econometrics for Migration",
    "section": "2.6 spatial econometric models",
    "text": "2.6 spatial econometric models\nmultiple graphs: modeling spatial dependence in the flow between \\(o\\) and \\(d\\) via \\(^oW\\), \\(^dW\\), and \\(^{od}W\\)\n\nspatial dependence\nOD-Graphs\nlag models\nerror models",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Install and Run</span>"
    ]
  },
  {
    "objectID": "notebooks/01_spatial_graphs.html",
    "href": "notebooks/01_spatial_graphs.html",
    "title": "2  The Spatial Graph",
    "section": "",
    "text": "2.1 Contiguity Graphs\nIn formal spatial models, we need a way of defining relationships between observations. In the spatial analysis and econometrics literature, the data structure used to relate observations to one another is canonically called a spatial weights matrix, or \\(W\\), and is used to specify the hypothesized interaction structure that may exist between spatial units (Getis 2009). These relationships between units form a special kind of network graph embedded in geographical space, and using the libpysal.graph module, we can explore these relationships in depth.\nNote: the Graph class is only available in versions of libpysal &gt;=4.9 (on versions prior to that, you need to use the W class, which works a little differently).\nThe graph will use the geodataframe index to identify unique observations, so when we have something meaningful (like a FIPS code) that serves as an “id variable”, then we should set that as the index.\nThe most common way of creating a spatial interaction graph is by “building” one from an existing geodataframe. The libpysal.graph.Graph class has a several methods available to generate these relationships, all of which use the Graph.build_* convention.\nA contiguity graph assumes observations have a relationship when they share an edge and/or vertex.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>The Spatial `Graph`</span>"
    ]
  },
  {
    "objectID": "notebooks/01_spatial_graphs.html#contiguity-graphs",
    "href": "notebooks/01_spatial_graphs.html#contiguity-graphs",
    "title": "2  The Spatial Graph",
    "section": "",
    "text": "2.1.1 Rook\n\ng_rook = Graph.build_contiguity(dc)\ng_rook.n\n\n571\n\n\nthe number of observations in our graph should match the number of rows in the dataframe from which it was constructed.\n\ndc.shape[0]\n\n571\n\n\nOne way to interact with the graph structure directly is to use the adjacency attribute which returns the neighbor relationships as a multi-indexed pandas series.\n\ng_rook.adjacency\n\nfocal         neighbor    \n110010001011  110010001021    1\n              110010001022    1\n              110010001023    1\n              110010041003    1\n              110010055032    1\n                             ..\n110019800001  110010108002    1\n              110010108003    1\n              110010108004    1\n              110010108005    1\n              110010110021    1\nName: weight, Length: 2948, dtype: int64\n\n\n\ng_rook.adjacency.reset_index()\n\n\n\n\n\n\n\n\nfocal\nneighbor\nweight\n\n\n\n\n0\n110010001011\n110010001021\n1\n\n\n1\n110010001011\n110010001022\n1\n\n\n2\n110010001011\n110010001023\n1\n\n\n3\n110010001011\n110010041003\n1\n\n\n4\n110010001011\n110010055032\n1\n\n\n...\n...\n...\n...\n\n\n2943\n110019800001\n110010108002\n1\n\n\n2944\n110019800001\n110010108003\n1\n\n\n2945\n110019800001\n110010108004\n1\n\n\n2946\n110019800001\n110010108005\n1\n\n\n2947\n110019800001\n110010110021\n1\n\n\n\n\n2948 rows × 3 columns\n\n\n\n“Slicing” into a Graph object returns a pandas series where the index is the neighbor’s id/key and the value is the “spatial weight” that encodes the strengrth of the connection between observations.\n\ng_rook[\"110019800001\"]\n\nneighbor\n110010001023    1\n110010047021    1\n110010056022    1\n110010056023    1\n110010058011    1\n110010058022    1\n110010058023    1\n110010058024    1\n110010059002    1\n110010065001    1\n110010065002    1\n110010066001    1\n110010073013    1\n110010082002    1\n110010082004    1\n110010083012    1\n110010101001    1\n110010101003    1\n110010102021    1\n110010102023    1\n110010102025    1\n110010105001    1\n110010105004    1\n110010106031    1\n110010107001    1\n110010108002    1\n110010108003    1\n110010108004    1\n110010108005    1\n110010110021    1\nName: weight, dtype: int64\n\n\nNote this is shorthand for slicing into the adjacency list itself\n\ng_rook.adjacency.loc[\"110019800001\"]\n\nneighbor\n110010001023    1\n110010047021    1\n110010056022    1\n110010056023    1\n110010058011    1\n110010058022    1\n110010058023    1\n110010058024    1\n110010059002    1\n110010065001    1\n110010065002    1\n110010066001    1\n110010073013    1\n110010082002    1\n110010082004    1\n110010083012    1\n110010101001    1\n110010101003    1\n110010102021    1\n110010102023    1\n110010102025    1\n110010105001    1\n110010105004    1\n110010106031    1\n110010107001    1\n110010108002    1\n110010108003    1\n110010108004    1\n110010108005    1\n110010110021    1\nName: weight, dtype: int64\n\n\nIf you prefer, the neighbors and weights values are also encoded as dictionaries on the Graph, available under the corresponding attributes.\n\ng_rook.neighbors[\"110019800001\"]\n\n('110010001023',\n '110010047021',\n '110010056022',\n '110010056023',\n '110010058011',\n '110010058022',\n '110010058023',\n '110010058024',\n '110010059002',\n '110010065001',\n '110010065002',\n '110010066001',\n '110010073013',\n '110010082002',\n '110010082004',\n '110010083012',\n '110010101001',\n '110010101003',\n '110010102021',\n '110010102023',\n '110010102025',\n '110010105001',\n '110010105004',\n '110010106031',\n '110010107001',\n '110010108002',\n '110010108003',\n '110010108004',\n '110010108005',\n '110010110021')\n\n\n\ng_rook.weights[\"110019800001\"]\n\n(1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1,\n 1)\n\n\nThe cardinalities attribute stores the number of connections/relationships for each observation. In graph terminology, that would be the number of edges for each node, and in simple terms, this is the number of neighbors for each unit of analysis\n\ng_rook.cardinalities\n\nfocal\n110010001011     5\n110010001021     8\n110010001022     5\n110010001023     8\n110010002011     3\n                ..\n110010110022     5\n110010111001     4\n110010111002     5\n110010111003    14\n110019800001    30\nName: cardinalities, Length: 571, dtype: int64\n\n\n\ng_rook.cardinalities.describe()\n\ncount    571.000000\nmean       5.162872\nstd        1.919363\nmin        2.000000\n25%        4.000000\n50%        5.000000\n75%        6.000000\nmax       30.000000\nName: cardinalities, dtype: float64\n\n\nWe can get a sense for what the neighbor distribution looks like by plotting a histogram of the cardinalities\n\ng_rook.cardinalities.hist()\n\n\n\n\n\n\n\n\nThe attribute pct_nonzero stores the share of entries in the \\(n \\times n\\) connectivity matrix that are non-zero. If every observation were connected to every other observation, this attribute would equal 1\n\ng_rook.pct_nonzero\n\n0.9041807625421343\n\n\nIn this graph, less than 1% of the entries in that matrix are non-zero, showing that this is a very sparse connectivity graph indeed. Note, to compute the pct_nonzero measure ourselves, we vould alternatively rely on properties of the graph:\n\n(g_rook.n_edges / g_rook.n_nodes**2) * 100\n\n0.9041807625421342\n\n\nTo see the full \\(n \\times n\\) matrix representation of the graph, the sparse (scipy) representation is available under the sparse attribute\n\ng_rook.sparse\n\n&lt;Compressed Sparse Row sparse array of dtype 'float64'\n    with 2948 stored elements and shape (571, 571)&gt;\n\n\n\ng_rook.sparse.todense()\n\narray([[0., 1., 1., ..., 0., 0., 0.],\n       [1., 0., 1., ..., 0., 0., 0.],\n       [1., 1., 0., ..., 0., 0., 0.],\n       ...,\n       [0., 0., 0., ..., 0., 1., 0.],\n       [0., 0., 0., ..., 1., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.]], shape=(571, 571))\n\n\nTo see the dense version, just convert from sparse to dense using scipy conventions. Both rows and columns of the matrix representation are ordered as found in the geodataframe from which the Graph was constructed (or in the order given, when using a _from_* method). Currently this order is stored under the unique_ids attribute.\n\ng_rook.unique_ids\n\nIndex(['110010001011', '110010001021', '110010001022', '110010001023',\n       '110010002011', '110010002012', '110010002021', '110010002022',\n       '110010002023', '110010002024',\n       ...\n       '110010109002', '110010110011', '110010110012', '110010110013',\n       '110010110021', '110010110022', '110010111001', '110010111002',\n       '110010111003', '110019800001'],\n      dtype='object', name='focal', length=571)\n\n\n\ng_rook.unique_ids.equals(dc.index)\n\nTrue\n\n\nSumming across rows of the matrix is another way to count neighbors for each observation\n\ng_rook.sparse.todense().sum(axis=1)[:20].astype(int)\n\narray([5, 8, 5, 8, 3, 6, 6, 6, 4, 6, 5, 3, 9, 6, 6, 7, 8, 3, 6, 7])\n\n\n\ng_rook.cardinalities.values[:20]\n\narray([5, 8, 5, 8, 3, 6, 6, 6, 4, 6, 5, 3, 9, 6, 6, 7, 8, 3, 6, 7])\n\n\nClassic spatial connectivity graphs are typically very sparse. That is, we generally do not consider every observation to have a relationship with every other observation. Rather, we tend to encode relationships such that observations are influenced directly by other observations that are nearby in physical space. But because nearby observations also interact with their neighbors, it is possible for an influence from one observation to influence another observation far away by traversing the graph.\nOne useful way to understand how the Graph encodes spatial relationships is to use the plot method, which embeds the graph in planar space showing how observations are connected to one another. In the default plot, each observation (or its centroid, if the observations are polygons) is shown as a dot (or node in graph terminology), and a line (or edge) is drawn between nodes that are connected. Since we are using a rook contiguity rule, the edge, here, indicates that the observations share a common border.\n\nax = g_rook.plot(dc, node_kws=dict(alpha=0.4), edge_kws=dict(alpha=0.4), figsize=(7, 8))\nctx.add_basemap(ax, source=ctx.providers.CartoDB.Positron, crs=dc.crs)\nax.axis(\"off\")\n\n(np.float64(316168.7752046084),\n np.float64(334887.8653454204),\n np.float64(4296336.275195858),\n np.float64(4318383.002576605))\n\n\n\n\n\n\n\n\n\nThe explore method creates an interactive webmap version of the same plot, though the arguments are a bit different.\n\nm = dc.explore(tiles=\"CartoDB Positron\", tooltip=[\"geoid\"])\ng_rook.explore(\n    dc,\n    m=m,\n)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\ncap = gpd.tools.geocode(\"the national mall, washington d.c.\").to_crs(dc.crs)\n\n\ncap\n\n\n\n\n\n\n\n\ngeometry\naddress\n\n\n\n\n0\nPOINT (324559.841 4306818.589)\nU.S. National Archives, 700, Pennsylvania Aven...\n\n\n\n\n\n\n\nThe national gallery of art is not exactly the national mall, but it is close enough\n\ncap.explore(tiles=\"CartoDB Positron\", marker_kwds=dict(radius=20), zoom_start=15)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nmall = gpd.overlay(cap, dc.reset_index())\n\nUsing an overlay operation from geopandas, we can collect the geoid we need to select from the Graph. For each observation in cap, the overlay will return the observations from dc that meet the spatial predicate (the default is intersect). (we reset the index here because we need to get the ‘geoid’ from the dataframe)\n\nmall\n\n\n\n\n\n\n\n\naddress\ngeoid\nn_total_housing_units\nn_vacant_housing_units\nn_occupied_housing_units\nn_owner_occupied_housing_units\nn_renter_occupied_housing_units\nn_housing_units_multiunit_structures_denom\nn_housing_units_multiunit_structures\nn_total_housing_units_sample\n...\np_hispanic_persons\np_native_persons\np_asian_persons\np_hawaiian_persons\np_asian_indian_persons\np_edu_hs_less\np_edu_college_greater\np_veterans\nyear\ngeometry\n\n\n\n\n0\nU.S. National Archives, 700, Pennsylvania Aven...\n110019800001\n5.0\n0.0\n5.0\n0.0\n5.0\n5.0\n5.0\n5.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n100.0\n0.0\n2021\nPOINT (324559.841 4306818.589)\n\n\n\n\n1 rows × 59 columns\n\n\n\n\nmall_id = mall.geoid.tolist()[0]\n\n\nmall_id\n\n'110019800001'\n\n\nSince the graph encodes the notion of a “neighborhood” for each unit, it can be a useful way of selecting (and visualizing) “neighborhoods” around a particular observation. For example here are all the blockgroups that neighbor the National Mall national gallery of art (well, the blockgroup that contains the national gallery of art)\n\nm = dc.loc[[mall_id]].explore(color=\"red\", tooltip=None, tiles=\"CartoDB Positron\")\ndc.loc[g_rook[mall_id].index].explore(m=m, tooltip=None)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nSince blockgroups vary in size, and the national mall is in an oddly shaped blockgroup, its neighbor set includes blockgroups from Georgetown (Northwest), to Capitol Hill (Northeast), to Anacostia (Southeast)…\nWhen plotting the graph, it is also possible to select subsets and/or style nodes and edges differently. Here we can contrast the neighborhood structure for the blockgroup containing the national mall versus another blockgroup near rock creek park. Passing those two indices (in a list) to the focal argument will plot only the subgraph for those two nodes.\n\nm = dc.explore(tiles=\"CartoDB Positron\", tooltip=[\"geoid\"])\ng_rook.explore(\n    dc,\n    m=m,\n    focal=[\"110019800001\", \"110010020012\"],\n    edge_kws=dict(color=\"red\"),\n    node_kws=dict(style_kwds=dict(radius=4, color=\"yellow\")),\n)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nSince the relationship graph is just a specific kind of network, we can also export directly to NetworkX, e.g. to leverage other graph theoretic measures. For example we could compute the degree of each node in the network and plot its distribution\n\nnxg = g_rook.to_networkx()\n\n\npd.Series([i[1] for i in nxg.degree()]).hist()\n\n\n\n\n\n\n\n\nAnd here it is easy to see that the degree of each node is the number of neighbors (which is the same as the cardinalities attribute of the original libpysal graph)\n\n\n2.1.2 Queen\n\ng_queen = Graph.build_contiguity(dc, rook=False)\n\nSince the ‘queen’ rule is more liberal and allows connections through the vertices as well as the edges, we would expect that each observation would have more neighbors, shifting our cardinality histogram to the right, and densifying the graph.\n\ng_queen.pct_nonzero\n\n1.1096763903926192\n\n\n\ng_rook.pct_nonzero\n\n0.9041807625421343\n\n\n\ng_queen.cardinalities.rename(\"queen\").plot(\n    kind=\"hist\", legend=True, alpha=0.6, bins=range(32)\n)\ng_rook.cardinalities.rename(\"rook\").plot(\n    kind=\"hist\", legend=True, alpha=0.6, bins=range(32)\n)\n\n\n\n\n\n\n\n\nOr the kernel density continuous estimate\n\ng_queen.cardinalities.rename(\"queen\").plot(kind=\"density\", legend=True)\ng_rook.cardinalities.rename(\"rook\").plot(kind=\"density\", legend=True)\n\n\n\n\n\n\n\n\nUltimately, though, the structure of the graph has not changed that substantially. If we plot both figures and scrutinize them side-by-side, a handful of differences emerge, but not many.\n\nf, ax = plt.subplots(1, 2, figsize=(12, 8))\nax = ax.flatten()\n\ng_rook.plot(\n    dc, ax=ax[0], node_kws=dict(alpha=0.4, s=3), edge_kws=dict(alpha=0.4)\n).set_title(\"rook\", fontsize=20)\n\ng_queen.plot(\n    dc, ax=ax[1], node_kws=dict(alpha=0.4, s=3), edge_kws=dict(alpha=0.4)\n).set_title(\"queen\", fontsize=20)\n\nfor ax in ax:\n    ax.axis(\"off\")\n    ctx.add_basemap(ax, source=ctx.providers.CartoDB.Positron, crs=dc.crs)\nplt.tight_layout()\n\n\n\n\n\n\n\n\nThe Queen graph subsumes the Rook graph, so if we plot the queen relationships beneath the rook relationships in a different color, then the colors still visible underneath show the difference between queen and rook graphs\n\nax = dc.plot(alpha=0.4, color=\"lightgrey\", figsize=(7, 8), edgecolor=\"black\")\nax = g_queen.plot(dc, ax=ax, nodes=False, edge_kws=dict(color=\"blue\"), figsize=(7, 8))\n\ng_rook.plot(dc, ax=ax, nodes=False, edge_kws=dict(color=\"red\"))\n\nax.axis(\"off\")\nctx.add_basemap(ax, source=ctx.providers.CartoDB.Positron, crs=dc.crs)\n\n\n\n\n\n\n\n\nAnything visible in blue is a connection through a vertex. But there is also a better way to do this…\n\n\n2.1.3 Bishop Weights\nIn theory, a “Bishop” weighting scheme is one that arises when only polygons that share vertexes are considered to be neighboring. But, since Queen contiguigy requires either an edge or a vertex and Rook contiguity requires only shared edges, the following relationship is true:\n\\[ \\mathcal{Q} = \\mathcal{R} \\cup \\mathcal{B} \\]\nwhere \\(\\mathcal{Q}\\) is the set of neighbor pairs via queen contiguity, \\(\\mathcal{R}\\) is the set of neighbor pairs via Rook contiguity, and \\(\\mathcal{B}\\) via Bishop contiguity. Thus:\n\\[ \\mathcal{Q} \\setminus \\mathcal{R} = \\mathcal{B}\\]\nBishop weights entail all Queen neighbor pairs that are not also Rook neighbors.\nPySAL does not have a dedicated bishop weights constructor, but you can construct very easily using the difference method. Other types of set operations between Graph objects are also available. This is the more important point than actually constructing Bishop weights (which encode an odd interaction structure in the social sciences and are essentially never used in practice). Combining Graph objects using set operations allows flexible composability.\n\nbishop = g_queen.difference(g_rook)\n\nThese are the connections that are shown in blue above\n\nm = dc.explore(\n    tooltip=None,\n    style_kwds=dict(color=\"black\", fill=False),\n    tiles=\"CartoDB Positron\",\n)\nbishop.explore(\n    dc, m=m, nodes=True, edge_kws=dict(color=\"purple\", style_kwds=dict(weight=5))\n)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>The Spatial `Graph`</span>"
    ]
  },
  {
    "objectID": "notebooks/01_spatial_graphs.html#distance-graphs",
    "href": "notebooks/01_spatial_graphs.html#distance-graphs",
    "title": "2  The Spatial Graph",
    "section": "2.2 Distance Graphs",
    "text": "2.2 Distance Graphs\n\n2.2.1 Distance-Band\nWhen building a graph based on distance relationships, we need to make a simple assumption: since the distance between two polygons is undefined (is it the distance between the nearest point of each polygon? the furthest points? the average?), we use the polygon centroid as it’s representation. The centroid is the geometric center of each polygon, so it serves as a reasonable approximation for the “average” distance of the poygon. Note that when building a distance band, the threshold argument is measured in units defined by the coordinate reference system (CRS) of the input dataframe. Here, we are using a UTM CRS, which means our units are measured in meters, so these graphs correspond to 1km and 2km thresholds.\n\ndc.crs\n\n&lt;Projected CRS: EPSG:32618&gt;\nName: WGS 84 / UTM zone 18N\nAxis Info [cartesian]:\n- E[east]: Easting (metre)\n- N[north]: Northing (metre)\nArea of Use:\n- name: Between 78°W and 72°W, northern hemisphere between equator and 84°N, onshore and offshore. Bahamas. Canada - Nunavut; Ontario; Quebec. Colombia. Cuba. Ecuador. Greenland. Haiti. Jamaica. Panama. Turks and Caicos Islands. United States (USA). Venezuela.\n- bounds: (-78.0, 0.0, -72.0, 84.0)\nCoordinate Operation:\n- name: UTM zone 18N\n- method: Transverse Mercator\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\n\ng_dist_500 = Graph.build_distance_band(dc.centroid, threshold=500)\ng_dist_1000 = Graph.build_distance_band(dc.centroid, threshold=1000)\ng_dist_2000 = Graph.build_distance_band(dc.centroid, threshold=2000)\ng_dist_3000 = Graph.build_distance_band(dc.centroid, threshold=3000)\n\nf, ax = plt.subplots(2, 2, figsize=(8, 10))\ngs = [g_dist_500, g_dist_1000, g_dist_2000, g_dist_3000]\nlabels = [\"500 m\", \"1 km\", \"2 km\", \"3 km\"]\nax = ax.flatten()\n\nfor i in range(len(ax)):\n    gs[i].plot(\n        dc, ax=ax[i], node_kws=dict(alpha=0.4, s=2), edge_kws=dict(alpha=0.4)\n    ).set_title(labels[i], fontsize=14)\n\n    ax[i].axis(\"off\")\n    ctx.add_basemap(ax[i], source=ctx.providers.CartoDB.Positron, crs=dc.crs)\nplt.tight_layout()\n\n\n\n\n\n\n\nFigure 2.1: Graph with Increasing Distance Band\n\n\n\n\n\nNaturally, distance-based relationships are sensitive to the density of observations in space. Since the distance threshold is fixed, denser locations will necessarily have more neighbors, whereas sparse locations may have few or no neighbors (e.g. the three observations in southeast DC in the 1km graph). This can be a useful property of distance-band graphs, because it keeps the notion of ‘neighborhood’ fixed across observations, and in many cases it makes sense for density to increase the neighbor set.\n\nbins = range(0, 120)\ng_dist_500.cardinalities.rename(\"500m\").hist(alpha=0.6, legend=True, bins=bins)\ng_dist_1000.cardinalities.rename(\"1km\").hist(alpha=0.5, legend=True, bins=bins)\ng_dist_2000.cardinalities.rename(\"2km\").hist(alpha=0.4, legend=True, bins=bins)\n\n\n\n\n\n\n\n\nAs the distance band increases, the neighbor distribution becomes more dispersed. In graphs with the smallest bandwidths, there are places in the study region with observations that fail to capture any neighbors (within the 500m and 1km thresholds), which creates disconnections in the graph. The different connected regions of the graph are called components, and it can be useful to know about them for a few reasons.\nFirst, if there is more than one component, it implies that the interaction structure in the study region is segmented. Disconnected components in the graph make it impossible, by definition, for a shock (innovation, message, etc) to traverse the graph from a node in one component to a node in another component. This situation has implications for certain applications such as spatial econometric modeling because certain conditions (like higher-order neighbors) may not exist.\nIf a study region contains multiple disconnected components, this information can also be used to partition or inspect the dataset. For example, if the region has multiple portions (e.g. Los Angeles and the Channel Islands, or the Hawaiian Islands, or Japan), then the component labels can be used to select groups of observations that belong to each component\n\ng_dist_1000.n_components\n\n5\n\n\nThe 1km distance-band graph has 5 components (look back at the map): a large central component, and four lonely observations in the Southern portion along the waterfront, all of which have no neighbors. When an observation has no neighbors, it’s called an isolate.\n\ng_dist_1000.isolates\n\nIndex(['110010073011', '110010073012', '110010073013', '110010109002'], dtype='object', name='focal')\n\n\n\ng_dist_1000.component_labels\n\nfocal\n110010001011    0\n110010001021    0\n110010001022    0\n110010001023    0\n110010002011    0\n               ..\n110010110022    0\n110010111001    0\n110010111002    0\n110010111003    0\n110019800001    0\nName: component labels, Length: 571, dtype: int32\n\n\nSince the distance-band is fixed but the density of observations varies across the study area, distance-band weights can result in high variance in the neighbor cardinalities, as described above (e.g. some observations have many neighbors, others have few or none). This can be a nuisance in some applications, but a useful feature in others. Moving back to a graph-theoretic framework, we can look at how certain nodes (census blockgroups) influence others by virtue of their position in the network. That is, some blockgroups are more central or more connected than others, and thus can exert a more influential role in the network as a whole.\n\nnxg_dist = g_dist_1000.to_networkx()\n\n\npd.Series(nx.degree_centrality(nxg_dist)).hist()\n\n\n\n\n\n\n\n\nThree graph-theoretic measures of centrality, which capture the concept of connectedness are closness centralty, betweenness centrality, and degree centrality, all of which (and more) can be computed for each node. By converting the graph to a NetworkX object, we can compute these three measures, then plot the most central node in the network of DC blockgroups according to each concept.\n\n# closeness centrality\nclose = (\n    pd.Series(nx.closeness_centrality(nxg_dist)).sort_values(ascending=False).index[0]\n)\n# betweenness centrality\nbetween = (\n    pd.Series(nx.betweenness_centrality(nxg_dist)).sort_values(ascending=False).index[0]\n)\n# degree centrality\ndegree = pd.Series(nx.degree_centrality(nxg_dist)).sort_values(ascending=False).index[0]\n\n# plot the most \"central\" node according to each metric\nfocal_kws = dict(marker_kwds=dict(radius=10), style_kwds=dict(fillOpacity=1))\ncentralities = zip([\"red\", \"yellow\", \"blue\"], [close, between, degree])\n\nm = g_dist_1000.explore(\n    dc,\n    color=\"gray\",\n    tiles=\"CartoDB Darkmatter\",\n    edge_kws=dict(style_kwds=dict(opacity=0.4)),\n)\n\nfor color, measure in centralities:\n    m = g_dist_1000.explore(\n        dc,\n        focal=measure,\n        color=color,\n        focal_kws=focal_kws,\n        m=m,\n    )\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nThe map helps clarify the different concepts of centrality. The nodes with the highest closeness and degree centrality are in the densest parts of the graph near downtown DC. The blue subgraph shows the node with the highest degree centrality (i.e. the node with the greatest number of connections within a 1km radius), which is argubaly the node with the greatest local connectivity and the red subgraph shows the node with the highest closeness centrality, which is the node with the greatest global connectivity. The yellow subgraph shows the node with the highest betweenness centrality. Unlike the others, the yellow graph does not have many connections (neighbors) of its own, but instead, it connects three very dense subgraphs and thus serves as a pivotal bridge between these pieces of space. In this case, the blockgroup is literally a polygon that contains several bridges across the Anacostia river, which helps demonstrate the importance of considering infrastructure and the built environment when traversing space–and how much power you wield if, say, you control a bridge for political gain\n\n\n2.2.2 K-Nearest Neighbors (KNN)\nUnlike the distance-band concept of a neighborhood, which defines neighbors according to a proximity criterion, regardless of how many neighbors meet that definition, the K-nearest neighbors (KNN) concept defines the neighbor set according to a minimum criterion, regardless of the distance necessary to travel to meet it. This is more akin to a relative concept of neighborhood, in that both dense and sparse places will have exactly the same number of neighbors, but the distance necessary to travel to interact with each neighbor can adapt to local conditions.\nThis concept has a different set of benefits relative to the distance-band approach, for example, there is no longer any variation in the neighbor cardinalities (which can be useful, and can ensure a much more connected graph in cases with observations of varying density. But the KNN relationships can also induce asymmetry, which may be a problem in certain spatial econometric applications.\n\ng_knn5 = Graph.build_knn(dc.centroid, k=5)\ng_knn10 = Graph.build_knn(dc.centroid, k=10)\n\n\nf, ax = plt.subplots(1, 2, figsize=(12, 8))\nax = ax.flatten()\n\ng_knn5.plot(\n    dc, ax=ax[0], node_kws=dict(alpha=0.4, s=3), edge_kws=dict(alpha=0.4)\n).set_title(\"k=5\", fontsize=18)\n\ng_knn10.plot(\n    dc, ax=ax[1], node_kws=dict(alpha=0.4, s=3), edge_kws=dict(alpha=0.4)\n).set_title(\"k=10\", fontsize=18)\n\nfor ax in ax:\n    ax.axis(\"off\")\n    ctx.add_basemap(ax, source=ctx.providers.CartoDB.Positron, crs=dc.crs)\nplt.tight_layout()\n\n\n\n\n\n\n\n\nUnlike distance relationships and contiguity relationships nearest-neighbor relationships are often asymmetric. That is, the closest observation to me may have several other neighbors closer than I am (i.e., in this scenario, I am not my neighbor’s neighbor)\n\ng_dist_1000.asymmetry()\n\nSeries([], Name: neighbor, dtype: object)\n\n\n\ng_queen.asymmetry()\n\nSeries([], Name: neighbor, dtype: object)\n\n\n\ng_knn10.asymmetry().head(10)\n\nfocal\n110010001011    110010001021\n110010001011    110010002022\n110010001011    110010002023\n110010001011    110010055012\n110010001011    110010055023\n110010001011    110010056011\n110010001021    110010001011\n110010001021    110010002012\n110010001021    110010005013\n110010001021    110010041002\nName: neighbor, dtype: object\n\n\n\ng_knn10.asymmetry().groupby(\"focal\").first().shape[0]\n\n558\n\n\n\ng_knn10.pct_nonzero\n\n1.7513134851138354\n\n\nIn the DC blockgroup data, the vast majority of observations in a KNN-10 graph contain an asymmetric relationship (that’s 98% of the data). Note, this does not mean that 98% of all relationships are asymmetric, only that 98% of the observations have at least one neighbor which does not consider the reciprocal observation a neighbor.\n\ng_knn10.asymmetry().groupby(\"focal\").first().shape[0] / g_knn10.n\n\n0.9772329246935202\n\n\n\nsymmetric = g_knn10.unique_ids[\n    ~g_knn10.unique_ids.isin(g_knn10.asymmetry().index.values)\n]\n\n\nsymmetric\n\nIndex(['110010013012', '110010013042', '110010024002', '110010024003',\n       '110010030001', '110010043002', '110010044021', '110010052023',\n       '110010080012', '110010092011', '110010093021', '110010095081',\n       '110010108003'],\n      dtype='object', name='focal')\n\n\n\nax = g_knn10.plot(\n    dc,\n    node_kws=dict(alpha=0.4),\n    edge_kws=dict(alpha=0.4),\n    focal=symmetric,\n    focal_kws=dict(color=\"blue\"),\n    figsize=(5, 5),\n)\nax.set_title(\"k=10 symmetric communties\")\nctx.add_basemap(ax=ax, source=ctx.providers.CartoDB.Positron, crs=dc.crs)\nax.axis(\"off\")\n\n(np.float64(320008.3228898232),\n np.float64(328771.65025115275),\n np.float64(4306210.070095919),\n np.float64(4315149.962498408))\n\n\n\n\n\n\n\n\n\nAll of the focal nodes plotted here are also neighbors with each of their neighbors (that sounds strange…)\n\ng_knn10.cardinalities.hist()\n\n\n\n\n\n\n\n\n\n\n2.2.3 Kernel Functions\nIn the general cases of the contiguity, distance-band, and KNN graphs, considered so far the relationships between observations are treated as binary: a relationship either exists or does not, and is encoded as a 1 if it exists, and as a 0 otherwise. But they can also all be extended to allow for the relationship to be weighted continuously by some additional measure. For example, a contiguity graph can be weighted by the lengh of the border shared between observations, which would allow observations to have a “stronger” relationship when they have larger sections of common borders.\nIn the KNN or distance-band cases, it can alternatively make sense to weight the observations according to distance from the focal observation (hence the longstanding terminology for the spatial graph as a spatial weights matrix). Applying a weighting function (often called a distance decay function) in this way helps encode the first law of geography, allowing nearer observations to have a greater influence than further observations. A distance-base weight with a decay function often takes the form of a [kernel](https://en.wikipedia.org/wiki/Kernel_(statistics) weight, where the kernel refers to the shape of the decay function (the commonly-used distance-band weight is actually a just uniform kernel, but sometimes it makes sense to allow variation within the band).\n\ng_kernel_linear = Graph.build_kernel(dc.centroid, kernel=\"triangular\", bandwidth=1000)\ng_kernel_gaussian = Graph.build_kernel(dc.centroid, kernel=\"gaussian\", bandwidth=1000)\n\nAs with the distance-band graph, the kernel graph is only defined for point geometries, so we use the centroid of each polygon as our representation of each unit, and the bandwidth is measured in units of the CRS (so defined as 1km here). Providing different arguments to the kernel parameter changes the weighting function applied at each distance.\n\ng_kernel_linear.adjacency.head(5)\n\nfocal         neighbor    \n110010001011  110010001021    0.153963\n              110010001022    0.470889\n              110010041001    0.070221\n              110010041003    0.387908\n              110010055011    0.449957\nName: weight, dtype: float64\n\n\n\ng_kernel_gaussian.adjacency.head(5)\n\nfocal         neighbor    \n110010001011  110010001021    0.188200\n              110010001022    0.209865\n              110010001023    0.156752\n              110010002011    0.091723\n              110010002012    0.119689\nName: weight, dtype: float64\n\n\nThe explore method can actually plot the value of the weight for each edge in the graph, although the visualization can be a bit tough to take in. It is easier to visualize one node at a time. Here, the shorter lines will be encoded with lighter colors and longer lines (representing longer distances) are darker as they get assigned lower weights. Note you can re-run the cell below to visualize a different node (or change the focal argument to a particular node instead of a random selection)\n\ng_kernel_linear.explore(\n    dc,\n    # pick a random node in the graph to visualize\n    focal=dc.reset_index().geoid.sample(),\n    edge_kws=dict(\n        column=\"weight\",\n        style_kwds=dict(weight=5),\n    ),\n    tiles=\"CartoDB Darkmatter\",\n)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>The Spatial `Graph`</span>"
    ]
  },
  {
    "objectID": "notebooks/01_spatial_graphs.html#transformations",
    "href": "notebooks/01_spatial_graphs.html#transformations",
    "title": "2  The Spatial Graph",
    "section": "2.3 Transformations",
    "text": "2.3 Transformations\nIn many empirical applications of the Graph, it is useful to normalize or standardize the weight structure for each unit (i.e. to rescale the weight value for each unit such that the sum equals 1). In the spatial econometrics literature, this operation is canonically called a transform of the spatial weights matrix. The Graph inherits this terminology; thus, it is extremely common to transform the Graph prior to using it.\n\ng_rook.adjacency.head(10)\n\nfocal         neighbor    \n110010001011  110010001021    1\n              110010001022    1\n              110010001023    1\n              110010041003    1\n              110010055032    1\n110010001021  110010001011    1\n              110010001022    1\n              110010002021    1\n              110010002022    1\n              110010004002    1\nName: weight, dtype: int64\n\n\nThe Graph’s transform method allows each observation to be standardized using different techniques\n\n?g_rook.transform\n\n\ng_rook.transform(\"r\").adjacency.head(10)\n\nfocal         neighbor    \n110010001011  110010001021    0.200\n              110010001022    0.200\n              110010001023    0.200\n              110010041003    0.200\n              110010055032    0.200\n110010001021  110010001011    0.125\n              110010001022    0.125\n              110010002021    0.125\n              110010002022    0.125\n              110010004002    0.125\nName: weight, dtype: float64\n\n\nNow the weight values for first observation (110010001011) are rescaled to 0.2 for each neighbor (since 110010001011 has 5 neighbors). Note that unlike its the predecessor (the libpysal.weights.Weights class), the Graph is immutable, which means to store the transformation permanently, it is necessary to save it back into a variable!\nNon-constant weights can also be transformed\n\ng_kernel_linear.adjacency\n\nfocal         neighbor    \n110010001011  110010001021    0.153963\n              110010001022    0.470889\n              110010041001    0.070221\n              110010041003    0.387908\n              110010055011    0.449957\n                                ...   \n110010111002  110010094003    0.246455\n              110010111001    0.189411\n110010111003  110010089031    0.013633\n110019800001  110010102025    0.276093\n              110010102026    0.031202\nName: weight, Length: 8732, dtype: float64\n\n\n\ng_kernel_linear.transform(\"r\").adjacency\n\nfocal         neighbor    \n110010001011  110010001021    0.032531\n              110010001022    0.099494\n              110010041001    0.014837\n              110010041003    0.081961\n              110010055011    0.095071\n                                ...   \n110010111002  110010094003    0.297544\n              110010111001    0.228675\n110010111003  110010089031    1.000000\n110019800001  110010102025    0.898464\n              110010102026    0.101536\nName: weight, Length: 8732, dtype: float64\n\n\nUsing a row-transformation, the weight values for each observation sum to 1\n\ng_kernel_linear.transform(\"r\").adjacency.groupby(level=0).sum()\n\nfocal\n110010001011    1.0\n110010001021    1.0\n110010001022    1.0\n110010001023    1.0\n110010002011    1.0\n               ... \n110010110022    1.0\n110010111001    1.0\n110010111002    1.0\n110010111003    1.0\n110019800001    1.0\nName: weight, Length: 571, dtype: float64\n\n\nIf we doubly standardize, the weight values for all observations combined sums to 1\n\ng_kernel_linear.transform(\"d\").adjacency.groupby(level=0).sum().sum()\n\nnp.float64(0.9999999999999999)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>The Spatial `Graph`</span>"
    ]
  },
  {
    "objectID": "notebooks/01_spatial_graphs.html#advanced-graphs",
    "href": "notebooks/01_spatial_graphs.html#advanced-graphs",
    "title": "2  The Spatial Graph",
    "section": "2.4 Advanced Graphs",
    "text": "2.4 Advanced Graphs\n\n2.4.1 Flow-based Graphs\nInstead of spatial proximity, the relationship between observations could be represented by other types of flow data, such as trade, transactions, or observed commutes. For example, the Census LODES data contain information on flows between residential locations and job locations at the block level. This uses LODES V7 which is based on 2010 census block definitions\n\ndc_flows = pd.read_csv(\n    \"https://lehd.ces.census.gov/data/lodes/LODES7/dc/od/dc_od_main_JT00_2019.csv.gz\"\n)\n\nThe data are formatted as an adjacency list, with the first three columns containing all the necessary information:\n\n“w_geocode”: workplace block fips code\n“h_geocode”: home block fips code\n“S000”: the total number of jobs (i.e. flows) between home and work\n\n\n# the block-level data is large, so save to disk before reading in\ndc_blks = datasets.blocks_2010(states=\"11\")\n\nOnce again, we pivot this adjacency list into a properly-ordered sparse matrix\n\ndc_flows[[\"w_geocode\", \"h_geocode\"]] = dc_flows[[\"w_geocode\", \"h_geocode\"]].astype(str)\ndc_flows[\"S000\"] = dc_flows[\"S000\"].astype(float)\n\ndc_blks = dc_blks[dc_blks.geoid.isin(dc_flows.w_geocode.unique())]\nids = dc_blks.geoid.values\n\ndc_flows_sparse = (\n    dc_flows.set_index([\"w_geocode\", \"h_geocode\"])[\"S000\"]\n    .astype(\"Sparse[float]\")\n    .reindex(ids, level=0)\n    .reindex(ids, level=1)\n    .sparse.to_coo(sort_labels=True)[0]\n)\n\ng_flow = Graph.from_sparse(dc_flows_sparse, ids=ids)\n\n\ng_flow.cardinalities.hist()\n\n\n\n\n\n\n\n\n\ng_flow.pct_nonzero\n\n1.28891109652\n\n\n\ng_flow.adjacency.reset_index().describe()\n\n\n\n\n\n\n\n\nweight\n\n\n\n\ncount\n128950.000000\n\n\nmean\n1.268313\n\n\nstd\n0.960348\n\n\nmin\n0.000000\n\n\n25%\n1.000000\n\n\n50%\n1.000000\n\n\n75%\n1.000000\n\n\nmax\n144.000000\n\n\n\n\n\n\n\n\ndc_blks.plot()\n\n\n\n\n\n\n\n\n\ng_flow.adjacency\n\nfocal            neighbor       \n110010011004003  110010106001001    1.0\n110010014023001  110010050021002    1.0\n                 110010021011002    1.0\n110010012001008  110010027021000    1.0\n110010012004020  110010095051004    1.0\n                                   ... \n110010002023010  110010025023004    1.0\n                 110010058002004    1.0\n                 110010007013001    1.0\n                 110010043002005    1.0\n110010097001012  110010044001017    1.0\nName: weight, Length: 128950, dtype: float64\n\n\n\ng_flow.n\n\n3163\n\n\n\ndc_blks.shape[0]\n\n3163\n\n\n\nax = g_flow.plot(\n    dc_blks.set_index(\"geoid\"),\n    nodes=False,\n    edge_kws=dict(alpha=0.004, linestyle=\"dotted\"),\n    figsize=(7,8),\n)\nctx.add_basemap(ax=ax, source=ctx.providers.CartoDB.Positron, crs=dc_blks.crs)\nax.axis(\"off\")\n\n(np.float64(-77.12566018280897),\n np.float64(-76.90141343715167),\n np.float64(38.806294724999994),\n np.float64(39.001803775))\n\n\n\n\n\n\n\n\n\nHere, the plot shows flows between origins and destinations. The strong central tendency shows how commutes tend to flow toward the center of the city\n\n\n2.4.2 Coincident Nodes\nClassic spatial graphs are built from polygon data, which are typically exhaustive and planar-enforced. The Census block and blockgroup data we have seen until now are typical in this way; the relationships expressed by polygon contiguity (or distance) are unambiguous and straightforward to model using a simple set of rules, but these spatial representations are often over-simplified or aggregate summaries of real phenomena. Blockgroups, for example, are zones created from aggregated household data, and the relationships can become more complex when working with disaggregate microdata recorded at the household level.\nContinuing with the household example, in urban areas, it is common for many observations to be located at the same “place”, for example an apartment building with several units located at the same physical address (in some cases additional information such as floor level could be available, allowing 3D distance computations, but this is an unusually detailed case that also requires the actual floor layout of each building to be realistic…). In these cases, (i.e. with several coincident observations in space) certain graph-building rules like triangulation or k-nearest neighbors can become invalid when the relatioships between points are undefined, yielding, e.g. 10 nearest neighbors at exactly the same location when the user has requested a graph with k=5. How do we choose which 5 among the coincident 10 should be neighbors?\n…We dont. Instead, we offer two solutions that make the rule valid:\n\njitter introduces a small amount of random noise into each location, dispersing a set of coincident points into a small point cloud. This generates a valid topology that can be operated upon using the original construction rule. The tradeoff, here, is that the neighbor-set is stochastic and any two versions of a jittered Graph will likely have very different neighbors.\nclique expands the graph internally, as necessary, so that the construction rule applies to each unique location rather than each unique observation. This effectively makes every coincident observation a neighbor with all other coincident observations, then proceeds with the normal construction rule. In other words, we operate on the subset of points for which the original construction rule is valid, then retroactively break the rule to reinsert the omitted observations back into their neighborhoods. In many cases, this can result in a “conceptually accurate” representation of the nighborhood (e.g. where units in the same apartment building are all considered neighbors), however the construction ‘rule’ will ultimately end up broken, which removes some of the desirable properties of certain graphs. For example, a KNN graph with 10 neighbors will now have variation, as some locations will have greater than 10 neighbors.\n\n\n\n\n\nGetis, Arthur. 2009. “Spatial Weights Matrices.” Geographical Analysis 41 (4): 404–10. https://doi.org/10.1111/j.1538-4632.2009.00768.x.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>The Spatial `Graph`</span>"
    ]
  },
  {
    "objectID": "notebooks/02_spatial_interaction.html",
    "href": "notebooks/02_spatial_interaction.html",
    "title": "3  Migration Graphs and Spatial Interaction",
    "section": "",
    "text": "3.1 Demographic & Socioeconomic Data",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Migration Graphs and Spatial Interaction</span>"
    ]
  },
  {
    "objectID": "notebooks/02_spatial_interaction.html#demographic-socioeconomic-data",
    "href": "notebooks/02_spatial_interaction.html#demographic-socioeconomic-data",
    "title": "3  Migration Graphs and Spatial Interaction",
    "section": "",
    "text": "3.1.1 ACS Data\n\ndatasets = DataStore()\n\ndc = gio.get_acs(datasets, state_fips=\"11\", years=2021, level=\"tract\")\n\n/Users/knaaptime/Dropbox/projects/geosnap/geosnap/io/util.py:273: UserWarning: Unable to find local adjustment year for 2021. Attempting from online data\n  warn(\n/Users/knaaptime/Dropbox/projects/geosnap/geosnap/io/constructors.py:218: UserWarning: Currency columns unavailable at this resolution; not adjusting for inflation\n  warn(\n\n\n\ndc.head()\n\n\n\n\n\n\n\n\ngeoid\nn_mexican_pop\nn_cuban_pop\nn_puerto_rican_pop\nn_russian_pop\nn_italian_pop\nn_german_pop\nn_irish_pop\nn_scandaniavian_pop\nn_foreign_born_pop\n...\np_poverty_rate\np_poverty_rate_over_65\np_poverty_rate_children\np_poverty_rate_white\np_poverty_rate_black\np_poverty_rate_hispanic\np_poverty_rate_native\np_poverty_rate_asian\ngeometry\nyear\n\n\n\n\n0\n11001000101\n102.0\n0.0\n0.0\n0.0\n68.0\n26.0\n59.0\n0.0\n149.0\n...\n2.341920\n0.000000\n0.000000\n2.341920\n0.000000\n2.341920\n0.0\n0.0\nMULTIPOLYGON (((-77.05714 38.91054, -77.05702 ...\n2021\n\n\n1\n11001000102\n134.0\n0.0\n0.0\n68.0\n56.0\n14.0\n146.0\n0.0\n746.0\n...\n6.724512\n1.487450\n1.456461\n4.834211\n0.000000\n0.000000\n0.0\n0.0\nMULTIPOLYGON (((-77.06927 38.90058, -77.06871 ...\n2021\n\n\n2\n11001000201\n152.0\n0.0\n109.0\n5.0\n45.0\n8.0\n98.0\n0.0\n731.0\n...\n19.402985\n0.000000\n0.000000\n16.417910\n2.985075\n0.000000\n0.0\n0.0\nMULTIPOLYGON (((-77.07927 38.91268, -77.07902 ...\n2021\n\n\n3\n11001000202\n42.0\n46.0\n58.0\n61.0\n91.0\n56.0\n220.0\n0.0\n793.0\n...\n12.948793\n2.472042\n0.000000\n10.829900\n0.588582\n0.824014\n0.0\n0.0\nMULTIPOLYGON (((-77.07991 38.90507, -77.07989 ...\n2021\n\n\n4\n11001000300\n150.0\n103.0\n8.0\n33.0\n220.0\n74.0\n71.0\n0.0\n1308.0\n...\n13.308750\n0.301710\n0.201140\n12.504190\n0.000000\n0.620181\n0.0\n0.0\nMULTIPOLYGON (((-77.08262 38.9212, -77.08256 3...\n2021\n\n\n\n\n5 rows × 158 columns\n\n\n\n\ndc.plot()\n\n\n\n\n\n\n\n\n\n\n3.1.2 LODES Data\n\ndc_flows = pd.read_csv(\n    \"https://lehd.ces.census.gov/data/lodes/LODES8/dc/od/dc_od_main_JT00_2022.csv.gz\",\n    converters={\"w_geocode\": str, \"h_geocode\": str},\n    low_memory=False,\n    encoding=\"latin1\",\n)\n\n\ndc_flows\n\n\n\n\n\n\n\n\nw_geocode\nh_geocode\nS000\nSA01\nSA02\nSA03\nSE01\nSE02\nSE03\nSI01\nSI02\nSI03\ncreatedate\n\n\n\n\n0\n110010001011000\n110010001011000\n1\n1\n0\n0\n0\n0\n1\n0\n1\n0\n20240920\n\n\n1\n110010001011000\n110010001011001\n3\n1\n2\n0\n0\n0\n3\n0\n0\n3\n20240920\n\n\n2\n110010001011000\n110010001011003\n1\n0\n0\n1\n0\n0\n1\n0\n0\n1\n20240920\n\n\n3\n110010001011000\n110010001011009\n1\n1\n0\n0\n0\n0\n1\n0\n1\n0\n20240920\n\n\n4\n110010001011000\n110010001021011\n1\n0\n0\n1\n0\n0\n1\n0\n1\n0\n20240920\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n169140\n110019800001187\n110010094004008\n1\n0\n1\n0\n0\n0\n1\n0\n0\n1\n20240920\n\n\n169141\n110019800001187\n110010095071000\n1\n0\n1\n0\n0\n0\n1\n0\n0\n1\n20240920\n\n\n169142\n110019800001187\n110010099021011\n1\n0\n1\n0\n0\n0\n1\n0\n0\n1\n20240920\n\n\n169143\n110019800001192\n110010047041001\n1\n0\n1\n0\n1\n0\n0\n0\n0\n1\n20240920\n\n\n169144\n110019800001192\n110010096041011\n1\n0\n1\n0\n1\n0\n0\n0\n0\n1\n20240920\n\n\n\n\n169145 rows × 13 columns\n\n\n\nadd tract-level geoids and drop extraneous columns\n\ndc_flows[\"w_tr_geocode\"] = dc_flows[\"w_geocode\"].str[:11]\ndc_flows[\"h_tr_geocode\"] = dc_flows[\"h_geocode\"].str[:11]\n\ndc_flows = dc_flows[[\"w_geocode\", \"h_geocode\", \"w_tr_geocode\", \"h_tr_geocode\", \"S000\"]]\n\npretend like its a closed system, only consdidering intra-regional flows\naggregate to tract-level flows (from block-level)\n\ndc_flows = (\n    dc_flows.groupby([\"w_tr_geocode\", \"h_tr_geocode\"])[\"S000\"].sum().reset_index()\n)\n\nthis is an origin-destination matrix (as an adjacency list). S000 is the number of flows between home census tract h_tr_geocode and work tract w_tr_geocode. There are many intra-tract flows \\(W_{ii}\\neq0\\)} (people commuting within the same tract, or possibly WFH, though that would be tough with LODES) and the flows are directed \\(W_{ij} \\neq W_{ji}\\)\n\ndc_flows\n\n\n\n\n\n\n\n\nw_tr_geocode\nh_tr_geocode\nS000\n\n\n\n\n0\n11001000101\n11001000101\n22\n\n\n1\n11001000101\n11001000102\n8\n\n\n2\n11001000101\n11001000202\n6\n\n\n3\n11001000101\n11001000300\n3\n\n\n4\n11001000101\n11001000501\n1\n\n\n...\n...\n...\n...\n\n\n23301\n11001980000\n11001010900\n26\n\n\n23302\n11001980000\n11001011001\n91\n\n\n23303\n11001980000\n11001011002\n50\n\n\n23304\n11001980000\n11001011100\n90\n\n\n23305\n11001980000\n11001980000\n3\n\n\n\n\n23306 rows × 3 columns\n\n\n\ncreate a pysal Graph to represent these flows. to represent the direction of flow correctly the focal column is home and neighbor is work (this shows the AM commute)\n\ndc_flow_graph = Graph.from_adjacency(\n    adjacency=dc_flows,\n    focal_col=\"h_tr_geocode\",\n    neighbor_col=\"w_tr_geocode\",\n    weight_col=\"S000\",\n)\n\n\ndc_flow_graph.summary()\n\n\nGraph Summary Statistics\n\n\nNumber of nodes:\n206\n\n\nNumber of edges:\n23306\n\n\nNumber of connected components:\n1\n\n\nNumber of isolates:\n0\n\n\nNumber of non-zero edges:\n23306\n\n\nPercentage of non-zero edges:\n54.92%\n\n\nNumber of asymmetries:\nNA\n\n\n\n\n            \n\nSum of weights and Traces\n\n\nS0:\n206135\nGG:\n915878\n\n\nS1:\n12398975\nG'G:\n11483097\n\n\nS3:\n2363152954\nG'G + GG:\n12398975\n\n\n\n\n            \n                Graph indexed by: ['11001000101', '11001000102', '11001000202', '1100100030...]\n            \n\n\n\ndc_flow_graph.adjacency.head()\n\nfocal        neighbor   \n11001000101  11001000101    22\n             11001000102    23\n             11001000202    12\n             11001000703     1\n             11001000704     1\nName: weight, dtype: int64\n\n\nthe Graph is ordered, and to visualize it correctly we want to align our other data to match this Graph; so stash the id/order\n\nidx = dc_flow_graph.unique_ids\n\ncreate a geodataframe of centroids to visualize point-to-point flows, then reindex to re-order appropriately and drop observations with no flow.\n\ndc_centroids = dc.set_geometry(dc.centroid)\ndc_centroids = dc_centroids.set_index(\"geoid\").reindex(idx)\n\n/var/folders/j8/5bgcw6hs7cqcbbz48d6bsftw0000gp/T/ipykernel_76455/898227089.py:1: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  dc_centroids = dc.set_geometry(dc.centroid)\n\n\n\ndc_centroids.shape  # matches our Graph.n\n\n(206, 157)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Migration Graphs and Spatial Interaction</span>"
    ]
  },
  {
    "objectID": "notebooks/02_spatial_interaction.html#visualize",
    "href": "notebooks/02_spatial_interaction.html#visualize",
    "title": "3  Migration Graphs and Spatial Interaction",
    "section": "3.2 Visualize",
    "text": "3.2 Visualize\n\nflows = dc_flow_graph.adjacency.reset_index()\n\n\nflows\n\n\n\n\n\n\n\n\nfocal\nneighbor\nweight\n\n\n\n\n0\n11001000101\n11001000101\n22\n\n\n1\n11001000101\n11001000102\n23\n\n\n2\n11001000101\n11001000202\n12\n\n\n3\n11001000101\n11001000703\n1\n\n\n4\n11001000101\n11001000704\n1\n\n\n...\n...\n...\n...\n\n\n23301\n11001980000\n11001009400\n1\n\n\n23302\n11001980000\n11001009510\n2\n\n\n23303\n11001980000\n11001010100\n3\n\n\n23304\n11001980000\n11001010202\n2\n\n\n23305\n11001980000\n11001980000\n3\n\n\n\n\n23306 rows × 3 columns\n\n\n\n\n# mapping of geoid to (point) geometry\ndc.centroid.head()\n\n/var/folders/j8/5bgcw6hs7cqcbbz48d6bsftw0000gp/T/ipykernel_76455/4023599085.py:2: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  dc.centroid.head()\n\n\n0    POINT (-77.05459 38.90863)\n1    POINT (-77.06127 38.90555)\n2    POINT (-77.07434 38.90922)\n3    POINT (-77.06946 38.90617)\n4    POINT (-77.07577 38.91755)\ndtype: geometry\n\n\n\nflows['focal'] = flows['focal'].replace(dc_centroids['geometry'].to_dict())\nflows['neighbor'] = flows['neighbor'].replace(dc_centroids['geometry'].to_dict())\n\n\nflows\n\n\n\n\n\n\n\n\nfocal\nneighbor\nweight\n\n\n\n\n0\nPOINT (-77.0545901773603 38.90863168678613)\nPOINT (-77.0545901773603 38.90863168678613)\n22\n\n\n1\nPOINT (-77.0545901773603 38.90863168678613)\nPOINT (-77.06126938548466 38.90554704444118)\n23\n\n\n2\nPOINT (-77.0545901773603 38.90863168678613)\nPOINT (-77.06945761360377 38.90616754177441)\n12\n\n\n3\nPOINT (-77.0545901773603 38.90863168678613)\nPOINT (-77.07904623332543 38.92909409426648)\n1\n\n\n4\nPOINT (-77.0545901773603 38.90863168678613)\nPOINT (-77.07523846048979 38.93002154576946)\n1\n\n\n...\n...\n...\n...\n\n\n23301\nPOINT (-77.03521796878309 38.88015568912712)\nPOINT (-76.97424646610372 38.936806296574765)\n1\n\n\n23302\nPOINT (-77.03521796878309 38.88015568912712)\nPOINT (-77.00462558924458 38.945597917488946)\n2\n\n\n23303\nPOINT (-77.03521796878309 38.88015568912712)\nPOINT (-77.03184718492626 38.90269707590609)\n3\n\n\n23304\nPOINT (-77.03521796878309 38.88015568912712)\nPOINT (-77.0244550492709 38.88309525105518)\n2\n\n\n23305\nPOINT (-77.03521796878309 38.88015568912712)\nPOINT (-77.03521796878309 38.88015568912712)\n3\n\n\n\n\n23306 rows × 3 columns\n\n\n\n\norigins = gpd.GeoSeries(flows.focal).get_coordinates().values\n\ndestinations = (\n    gpd.GeoSeries(flows.neighbor).get_coordinates().values\n)\n\n\norigins\n\narray([[-77.05459018,  38.90863169],\n       [-77.05459018,  38.90863169],\n       [-77.05459018,  38.90863169],\n       ...,\n       [-77.03521797,  38.88015569],\n       [-77.03521797,  38.88015569],\n       [-77.03521797,  38.88015569]], shape=(23306, 2))\n\n\n\nfrom shapely import LineString\n\n\nLineString([flows['focal'][0], flows['neighbor'][0]])\n\n\n\n\n\n\n\n\n\nlines = gpd.GeoSeries([LineString([row[1]['focal'], row[1]['neighbor']]) for row in flows.iterrows()], crs=4326)\n\n\nflow_lines =gpd.GeoDataFrame(flows['weight'], geometry=lines)\n\n\nflow_lines\n\n\n\n\n\n\n\n\nweight\ngeometry\n\n\n\n\n0\n22\nLINESTRING (-77.05459 38.90863, -77.05459 38.9...\n\n\n1\n23\nLINESTRING (-77.05459 38.90863, -77.06127 38.9...\n\n\n2\n12\nLINESTRING (-77.05459 38.90863, -77.06946 38.9...\n\n\n3\n1\nLINESTRING (-77.05459 38.90863, -77.07905 38.9...\n\n\n4\n1\nLINESTRING (-77.05459 38.90863, -77.07524 38.9...\n\n\n...\n...\n...\n\n\n23301\n1\nLINESTRING (-77.03522 38.88016, -76.97425 38.9...\n\n\n23302\n2\nLINESTRING (-77.03522 38.88016, -77.00463 38.9...\n\n\n23303\n3\nLINESTRING (-77.03522 38.88016, -77.03185 38.9...\n\n\n23304\n2\nLINESTRING (-77.03522 38.88016, -77.02446 38.8...\n\n\n23305\n3\nLINESTRING (-77.03522 38.88016, -77.03522 38.8...\n\n\n\n\n23306 rows × 2 columns\n\n\n\n\nlines.explore()\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nviz(flow_lines)\n\n\n\n\n\ndc_flow_graph.adjacency\n\nfocal        neighbor   \n11001000101  11001000101    22\n             11001000102    23\n             11001000202    12\n             11001000703     1\n             11001000704     1\n                            ..\n11001980000  11001009400     1\n             11001009510     2\n             11001010100     3\n             11001010202     2\n             11001980000     3\nName: weight, Length: 23306, dtype: int64\n\n\n\nflow_lines[['weight', 'geometry']]\n\n\n\n\n\n\n\n\nweight\ngeometry\n\n\n\n\n0\n22\nLINESTRING (-77.05459 38.90863, -77.05459 38.9...\n\n\n1\n23\nLINESTRING (-77.05459 38.90863, -77.06127 38.9...\n\n\n2\n12\nLINESTRING (-77.05459 38.90863, -77.06946 38.9...\n\n\n3\n1\nLINESTRING (-77.05459 38.90863, -77.07905 38.9...\n\n\n4\n1\nLINESTRING (-77.05459 38.90863, -77.07524 38.9...\n\n\n...\n...\n...\n\n\n23301\n1\nLINESTRING (-77.03522 38.88016, -76.97425 38.9...\n\n\n23302\n2\nLINESTRING (-77.03522 38.88016, -77.00463 38.9...\n\n\n23303\n3\nLINESTRING (-77.03522 38.88016, -77.03185 38.9...\n\n\n23304\n2\nLINESTRING (-77.03522 38.88016, -77.02446 38.8...\n\n\n23305\n3\nLINESTRING (-77.03522 38.88016, -77.03522 38.8...\n\n\n\n\n23306 rows × 2 columns\n\n\n\n\nbrushing_extension = BrushingExtension()\nbrushing_radius = 300\n\narc_layer = ArcLayer(\n    table=flow_lines[['weight', 'geometry']].to_arrow(),\n    get_width=flow_lines.weight.apply(lambda x: x**.7),\n    get_source_position=origins,\n    get_target_position=destinations,\n    opacity=0.4,\n    pickable=False,\n    extensions=[brushing_extension],\n    brushing_radius=brushing_radius,\n    get_source_color=get_color_array(flow_lines.weight**.7, scheme='fisher_jenks', k=10, cmap='inferno_r'),\n    get_target_color=get_color_array(flow_lines.weight**.7, scheme='fisher_jenks', k=10, cmap='inferno_r')\n)\n\nsource_gdf = gpd.GeoDataFrame(geometry=flows[\"focal\"], crs=4326)\ntarget_gdf = gpd.GeoDataFrame(geometry=flows[\"neighbor\"], crs=4326)\n\ntgt = ScatterplotLayer.from_geopandas(\n    target_gdf,\n    radius_scale=30,\n    pickable=True,\n    stroked=False,\n    filled=True,\n    line_width_min_pixels=2,\n    extensions=[brushing_extension],\n    brushing_radius=brushing_radius,\n)\n\nsrc = ScatterplotLayer.from_geopandas(\n    source_gdf,\n    radius_scale=15,\n    pickable=False,\n    stroked=False,\n    filled=True,\n    line_width_min_pixels=2,\n    extensions=[brushing_extension],\n    brushing_radius=brushing_radius,\n)\n\nbounds = PolygonLayer.from_geopandas(\n    dc,\n    get_fill_color=[255, 255, 255, 200],\n    stroked=True,\n    line_width_min_pixels=0.5,\n    pickable=False,\n    opacity=0.3\n)\n\nogb = ScatterplotLayer.from_geopandas(\n    source_gdf,\n    get_fill_color=[255, 255, 255, 200],\n    stroked=True,\n    line_width_min_pixels=0.5,\n    pickable=False,\n)\n\ngmap = Map(layers=[bounds, src, tgt, arc_layer,ogb], picking_radius=500)\ngmap.to_html('dc_flow_orig_orient.html')\n\n\ngmap\n\n/Users/knaaptime/miniforge3/envs/nersa25/lib/python3.12/site-packages/lonboard/_geoarrow/ops/reproject.py:113: UserWarning: Input being reprojected to EPSG:4326 CRS.\nLonboard is only able to render data in EPSG:4326 projection.\n  warnings.warn(\n\n\n\n\n\nThe mouseover is keyed on home (origin), so the visualiztion shows flows away from the selected location. To focus on destinations/inflows, we can reverse the orientation in the ArcLayer. Use control+click and drag in the map to change the view angle.\n\nflows\n\n\n\n\n\n\n\n\nfocal\nneighbor\nweight\n\n\n\n\n0\nPOINT (-77.0545901773603 38.90863168678613)\nPOINT (-77.0545901773603 38.90863168678613)\n22\n\n\n1\nPOINT (-77.0545901773603 38.90863168678613)\nPOINT (-77.06126938548466 38.90554704444118)\n23\n\n\n2\nPOINT (-77.0545901773603 38.90863168678613)\nPOINT (-77.06945761360377 38.90616754177441)\n12\n\n\n3\nPOINT (-77.0545901773603 38.90863168678613)\nPOINT (-77.07904623332543 38.92909409426648)\n1\n\n\n4\nPOINT (-77.0545901773603 38.90863168678613)\nPOINT (-77.07523846048979 38.93002154576946)\n1\n\n\n...\n...\n...\n...\n\n\n23301\nPOINT (-77.03521796878309 38.88015568912712)\nPOINT (-76.97424646610372 38.936806296574765)\n1\n\n\n23302\nPOINT (-77.03521796878309 38.88015568912712)\nPOINT (-77.00462558924458 38.945597917488946)\n2\n\n\n23303\nPOINT (-77.03521796878309 38.88015568912712)\nPOINT (-77.03184718492626 38.90269707590609)\n3\n\n\n23304\nPOINT (-77.03521796878309 38.88015568912712)\nPOINT (-77.0244550492709 38.88309525105518)\n2\n\n\n23305\nPOINT (-77.03521796878309 38.88015568912712)\nPOINT (-77.03521796878309 38.88015568912712)\n3\n\n\n\n\n23306 rows × 3 columns\n\n\n\n\ndest_graph = Graph.from_adjacency(dc_flows,\n    focal_col=\"w_tr_geocode\",\n    neighbor_col=\"h_tr_geocode\",\n    weight_col=\"S000\",\n)\n\ndest_graph_flows = dest_graph.adjacency.reset_index()\n\ndest_graph_flows['focal'] = dest_graph_flows['focal'].replace(dc_centroids['geometry'].to_dict())\ndest_graph_flows['neighbor'] = dest_graph_flows['neighbor'].replace(dc_centroids['geometry'].to_dict())\n\ndest_lines = gpd.GeoSeries([LineString([row[1]['focal'], row[1]['neighbor']]) for row in dest_graph_flows.iterrows()], crs=4326)\ndest_lines =gpd.GeoDataFrame(dest_graph_flows['weight'], geometry=dest_lines)\n\norigins = gpd.GeoSeries(dest_graph_flows.focal).get_coordinates().values\n\ndestinations = (\n    gpd.GeoSeries(dest_graph_flows.neighbor).get_coordinates().values\n)\n\narc_layer = ArcLayer(\n    table=dest_lines[['weight', 'geometry']].to_arrow(),\n    get_width=dest_lines.weight.apply(lambda x: x**.7),\n    get_source_position=origins,\n    get_target_position=destinations,\n    opacity=0.4,\n    pickable=False,\n    extensions=[brushing_extension],\n    brushing_radius=brushing_radius,\n    get_source_color=get_color_array(dest_lines.weight**.8, scheme='fisher_jenks', k=10, cmap='inferno_r'),\n    get_target_color=get_color_array(dest_lines.weight**.6, scheme='fisher_jenks', k=10, cmap='inferno_r')\n)\ngmap = Map(layers=[bounds, src, tgt, arc_layer,ogb], picking_radius=500)\n\ngmap.to_html('dc_flow_dest_orient.html')\n\ngmap\n\n\n\n\nThis map is keyed on destination, so mousing over each observation shows flows migrating into the pointer.\n\ndc = dc.set_index(\"geoid\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Migration Graphs and Spatial Interaction</span>"
    ]
  },
  {
    "objectID": "notebooks/02_spatial_interaction.html#migration-as-a-graph",
    "href": "notebooks/02_spatial_interaction.html#migration-as-a-graph",
    "title": "3  Migration Graphs and Spatial Interaction",
    "section": "3.3 Migration as a Graph",
    "text": "3.3 Migration as a Graph\nthe matrix representation of the network shows us the level of flow from each origin-destination pair\n\n3.3.1 Matrix Representation\n\ndc_flow_graph.sparse.todense()\n\narray([[ 22.,  23.,  12., ...,  32.,   0.,  38.],\n       [  8., 123.,  30., ...,  51.,   0.,  53.],\n       [  6.,  51.,  84., ..., 137.,   0.,  44.],\n       ...,\n       [  0.,   0.,   5., ...,  95.,   0.,   1.],\n       [  0.,   0.,   0., ...,   0.,   2.,   1.],\n       [  0.,   0.,   0., ...,   0.,   0.,   3.]], shape=(206, 206))\n\n\nthere are lots of “internal flows”, i.e. commutes that begin and end in the same tract (relatively large numbers along the diagonal). But it’s common in migration studies to focus on inter-zonal flows, so we remove these–but first we will record the total numbers\n\nall_commutes = pd.Series(\n    dc_flow_graph.sparse.sum(axis=1), index=dc_flow_graph.unique_ids, name=\"flows\"\n)\n\nnow save the total number of internal commutes (self-loops in the network; the diagonal of the matrix)\n\n# how many self-loops (trips originating and ending in the same tract\n# not sure if there's an easier way to get this, but its the diagonal of the weights matrix\nintra_commutes = pd.Series(\n    np.diag(dc_flow_graph.sparse.todense()),\n    index=dc_flow_graph.unique_ids,\n    name=\"self_loops\",\n)\nintra_share = intra_commutes / all_commutes\n\n\nintra_commutes\n\nfocal\n11001000101     22.0\n11001000102    123.0\n11001000202     84.0\n11001000300     81.0\n11001000501     36.0\n               ...  \n11001011002     13.0\n11001011100     83.0\n11001000201     95.0\n11001006804      2.0\n11001980000      3.0\nName: self_loops, Length: 206, dtype: float64\n\n\njust so we can take a look: internal commutes are a small but non-significant share of our job flow data\n\nintra_share\n\nfocal\n11001000101    0.047826\n11001000102    0.142857\n11001000202    0.097335\n11001000300    0.052907\n11001000501    0.029826\n                 ...   \n11001011002    0.022491\n11001011100    0.056271\n11001000201    0.590062\n11001006804    0.028169\n11001980000    0.090909\nLength: 206, dtype: float64\n\n\n\nintra_commutes.sum() / all_commutes.sum()\n\nnp.float64(0.0358114827661484)\n\n\nin DC, 3.6% of the employees in LODES data have a job and workplace in the same census tract\n\ndc.join(intra_commutes, how=\"left\").explore(\n    \"self_loops\",\n    style_kwds={\"weight\": 0.5},\n    tiles=\"cartodb positron\",\n    tooltip=\"self_loops\",\n    scheme=\"fisherjenks\",\n    cmap=\"RdBu_r\",\n)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\ndc.join(intra_share.rename(\"intra_share\"), how=\"left\").explore(\n    \"intra_share\",\n    style_kwds={\"weight\": 0.5},\n    tiles=\"cartodb positron\",\n    tooltip=\"intra_share\",\n    scheme=\"fisherjenks\",\n    cmap=\"RdBu_r\",\n)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n3.3.2 Network Representation\nto look at directionality (sending regions vs receiving regions) we can use network method from networkx\nwe only want to consider incoming and outgoing flows, so we first remove the diagonal in our Graph (and drop those observations), then convert to a networkx object\n\ndc_nx = dc_flow_graph.assign_self_weight(0).eliminate_zeros().to_networkx()\n\nthe degree of a node is the number of connections it has. Out-degree is the number of outgoing connections and in-degree is the number of incoming connections. For a focal observation, the out degree is the number of ‘neighbors’ it has (in spatial graph terminology), which is the same as its cardinality\n\ndc_flow_graph.assign_self_weight(0).eliminate_zeros().cardinalities\n\nfocal\n11001000101     59\n11001000102     86\n11001000202     84\n11001000300    111\n11001000501    114\n              ... \n11001011002     83\n11001011100    138\n11001000201     41\n11001006804     37\n11001980000     22\nName: cardinalities, Length: 206, dtype: int64\n\n\n\npd.Series(dict(dc_nx.out_degree))\n\n11001000101     59\n11001000102     86\n11001000202     84\n11001000703     80\n11001000704    106\n              ... \n11001009507     96\n11001009905    130\n11001009801    101\n11001009906     97\n11001009802     95\nLength: 206, dtype: int64\n\n\nwhen the degree measure is weighted, each link/edge/relationship is multiplied by by its weight. Thus the weighted degree for each node is the sum of its weights (in spatial econometric parlance, this is equivalent to an un-transformed spatial lag)\nwith out flow data, the weighted out degree measures the number of trips moving away from a home tract in the AM, and in-degree measures the number of trips incoming during the AM commute. The weighted degree (plain) is their sum, capturing the total fluctuation in the unit\n\nout_degree = pd.Series(\n    dict(dc_nx.out_degree(dc_nx, weight=\"weight\")), name=\"out_degree\"\n)\nin_degree = pd.Series(\n    dict(dc_nx.in_degree(dc_nx, weight=\"weight\")), name=\"in_degree\"\n)\n\ndegree = pd.Series(dict(dc_nx.degree(dc_nx, weight=\"weight\")), name=\"degree\")\n\nnote the weighted out-degree is the same as the spatial lag when the weights matrix is unstandardized\n\nlag = dc_flow_graph.lag(np.ones(dc_flow_graph.n))\n\n\npd.Series(lag).hist()\n\n\n\n\n\n\n\n\n\nout_degree.hist()\n\n\n\n\n\n\n\n\n\npop_change = intra_commutes + in_degree - out_degree\n\n\npop_change.hist()\n\n\n\n\n\n\n\n\n\n# daily population change\n# internal movers plus immigration minus emigration\nintra_commutes + in_degree - out_degree\n\n11001000101     -287.0\n11001000102     2343.0\n11001000201     4132.0\n11001000202     1560.0\n11001000300    -1092.0\n                ...   \n11001010900     -340.0\n11001011001     -814.0\n11001011002     -383.0\n11001011100      295.0\n11001980000    13076.0\nLength: 206, dtype: float64\n\n\n\nout_degree\n\n11001000101    438\n11001000102    738\n11001000202    779\n11001000703    547\n11001000704    699\n              ... \n11001009507    551\n11001009905    852\n11001009801    407\n11001009906    454\n11001009802    463\nName: out_degree, Length: 206, dtype: int64\n\n\n\nout_degree.sum() + intra_commutes.sum() == all_commutes.sum()\n\nnp.True_\n\n\n\ndc_flow_graph.adjacency.reset_index().groupby(\"neighbor\").sum().sum()\n\nfocal     1100100010111001000102110010002021100100030011...\nweight                                               206135\ndtype: object\n\n\n\nout_degree.sum()\n\nnp.int64(198753)\n\n\n\nout_degree.sum() / all_commutes.sum()\n\nnp.float64(0.9641885172338516)\n\n\n\nall_commutes.sum()\n\nnp.float64(206135.0)\n\n\n\nimport seaborn as sns\nsns.heatmap(dc_flow_graph.sparse.todense())\n\n\n\n\n\n\n\n\n\nout_degree.hist(bins=20)\n\n\n\n\n\n\n\n\n\nin_degree.sum()\n\nnp.int64(198753)\n\n\n\nin_degree.hist(bins=20)\n\n\n\n\n\n\n\n\n\ndc.join(out_degree, how=\"left\").explore(\n    \"out_degree\",\n    style_kwds={\"weight\": 0.5},\n    tiles=\"cartodb positron\",\n    tooltip=\"out_degree\",\n    scheme=\"fisherjenks\",\n)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\ndc.join(in_degree, how=\"left\").explore(\n    \"in_degree\",\n    style_kwds={\"weight\": 0.5},\n    linewidth=0.5,\n    tiles=\"cartodb positron\",\n    tooltip=\"in_degree\",\n    scheme=\"fisherjenks\",\n)\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\ndc.join((out_degree / all_commutes).rename(\"out_share\"), how=\"left\").plot(\n    \"out_share\",\n    linewidth=0.5,\n    #style_kwds={\"weight\": 0.5},\n    #tiles=\"cartodb positron\",\n    #tooltip=\"out_share\",\n    scheme=\"fisherjenks\",\n    cmap=\"RdBu_r\",\n)\n\n\n\n\n\n\n\n\nin-migration as a share of all change\n\n(in_degree / (intra_commutes + in_degree)).hist()\n\n\n\n\n\n\n\n\n\ndc.join(\n    (in_degree / (intra_commutes + in_degree)).rename(\"in_share\"), how=\"left\"\n).plot(\n    \"in_share\",\n    #style_kwds={\"weight\": 0.5},\n    #tiles=\"cartodb positron\",\n    #tooltip=\"in_share\",\n    linewidth=0.5,\n    scheme=\"fisherjenks\",\n    cmap=\"RdBu_r\",\n)\n\n\n\n\n\n\n\n\n\n(out_degree / all_commutes).hist()\n\n\n\n\n\n\n\n\n\ndc.join(((in_degree - out_degree) / degree).rename(\"diff\"), how=\"left\").plot(\n    \"diff\",\n    #style_kwds={\"weight\": 0.5},\n    #tiles=\"cartodb positron\",\n    #tooltip=\"diff\",\n    linewidth=0.5,\n    scheme=\"fisherjenks\",\n    cmap=\"RdBu_r\",\n    legend=True\n)\n\n\n\n\n\n\n\n\n\nout_degree / all_commutes\n\n11001000101    0.952174\n11001000102    0.857143\n11001000201    0.409938\n11001000202    0.902665\n11001000300    0.947093\n                 ...   \n11001010900    0.986527\n11001011001    0.975391\n11001011002    0.977509\n11001011100    0.943729\n11001980000    0.909091\nLength: 206, dtype: float64",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Migration Graphs and Spatial Interaction</span>"
    ]
  },
  {
    "objectID": "notebooks/02_spatial_interaction.html#spatial-interaction-models",
    "href": "notebooks/02_spatial_interaction.html#spatial-interaction-models",
    "title": "3  Migration Graphs and Spatial Interaction",
    "section": "3.4 Spatial Interaction Models",
    "text": "3.4 Spatial Interaction Models\nSpatial interaction models are a classic regional science technique for modeling flows (migration, commuting, trading, etc). Spatial interaction models try to explain these flows between origin and destination as a function of origin (push) and destination (pull) factors, attenuated by the cost of traveling between them. The PySAL spint package implements a custom estimation engine designed for fast performance on sparse design matrices (like those typical in spatial interaction models), but they can also be fit using conventional statistical packages like statsmodels albeit with a performance downgrade.\nIn this model, the dependent variable \\(y\\) is the level of flow between an origin and destination. Our Graph is based on flows, which means \\(y\\) is the value of the “weight” held in balt_flow_graph, thus can use the adjacency list as our core data structure.\n\nDescribing spatial interaction with an equation has a long and storied history, with Carrothers (1956), Sen and Smith (1995), and Farmer and Oshan (2017), among many others, furnishing point-in-time reviews of this topic in terms of its popular gravity model formulation, whose general form is as follows:\n\n\\[F_{ij} = g[O_i, D_j, f(d_{ij})] \\tag{3.1}\\]\n\nwhere $F_{ij} denotes the flow between origin \\(i\\) and destination \\(j\\) areal units, \\(O_i\\) is some attribute variable(s) quantifying relevant features of origin \\(i\\), \\(D_j\\) is some attribute variable(s) quantifying relevant features of destination \\(j\\), \\(g\\) is some function (frequently multiplicative in form), and \\(f(d_{ij})\\) is some deterrent. The initial functional form resulted in Eq. (7.1) being transformed to a log-linear version and a normally distributed error attached to it for estimation and inference purposes, yielding\n\n\\[ log(F_{ij} + \\delta) = log(\\kappa) + \\alpha log(O_i)  + \\beta log(D_j) + \\gamma d_{ij} + \\epsilon_{ij}  \\tag{3.2}\\]\n\nwhere log denotes natural logarithm, \\(\\epsilon_{ij}\\) is a normally distributed random error term, \\(\\delta \\geq 0\\) added to the response variable \\(F_{ij}\\) is a translation parameter needed if any \\(F_{ij} = 0\\), and \\(\\kappa, \\alpha, \\beta\\) and \\(\\gamma\\) are linear regression coefficients; sometimes this equation includes \\(log(d_{ij})\\) rather than \\(d_{ij}\\). This specification results in exponents for the \\(O_i\\) and \\(D_j\\) variables when the equation is backtransformed to its multiplicative form. Difficulties associated with this implementation include that \\(F_{ij}\\) often is a count for which many cases are zero (hence the need for \\(\\delta\\)).\n— Griffith, Chun, and Li (2019)\n\nGetis (1991) Putman and Chung (1989) Griffith, Chun, and Li (2019) Fotheringham and O’Kelly (1989)\n(as usual, there’s an insane Tobler paper on the topic (Tobler 1983))\n\ndc_flow_graph = dc_flow_graph.assign_self_weight(0).eliminate_zeros()\n\n\n# sparse representation\ndc_interaction = (\n    dc_flow_graph.assign_self_weight(0).eliminate_zeros().adjacency.reset_index()\n)\ndc_interaction\n\n\n\n\n\n\n\n\nfocal\nneighbor\nweight\n\n\n\n\n0\n11001000101\n11001000102\n23\n\n\n1\n11001000101\n11001000202\n12\n\n\n2\n11001000101\n11001000703\n1\n\n\n3\n11001000101\n11001000704\n1\n\n\n4\n11001000101\n11001000804\n2\n\n\n...\n...\n...\n...\n\n\n23096\n11001980000\n11001006900\n1\n\n\n23097\n11001980000\n11001009400\n1\n\n\n23098\n11001980000\n11001009510\n2\n\n\n23099\n11001980000\n11001010100\n3\n\n\n23100\n11001980000\n11001010202\n2\n\n\n\n\n23101 rows × 3 columns\n\n\n\n\n# for our dataset we want the full dense matrix\ndc_interaction = pd.Series(dc_flow_graph.sparse.toarray().reshape(-1), \n                             index=pd.MultiIndex.from_product([dc_flow_graph.unique_ids, \n                                                               dc_flow_graph.unique_ids.rename('neighbor')])).rename('weight')\n\n\ndc_interaction = dc_interaction.reset_index()\ndc_interaction\n\n\n\n\n\n\n\n\nfocal\nneighbor\nweight\n\n\n\n\n0\n11001000101\n11001000101\n0.0\n\n\n1\n11001000101\n11001000102\n23.0\n\n\n2\n11001000101\n11001000202\n12.0\n\n\n3\n11001000101\n11001000300\n0.0\n\n\n4\n11001000101\n11001000501\n0.0\n\n\n...\n...\n...\n...\n\n\n42431\n11001980000\n11001011002\n0.0\n\n\n42432\n11001980000\n11001011100\n0.0\n\n\n42433\n11001980000\n11001000201\n0.0\n\n\n42434\n11001980000\n11001006804\n0.0\n\n\n42435\n11001980000\n11001980000\n0.0\n\n\n\n\n42436 rows × 3 columns\n\n\n\nin spatial interaction terms focal=origin and neighbor=destination, so we can attach attributes of origins and destinations by doing left-joins on the y-variable successively based on focal, then neighbor\n\n# first merge origin attributes\ndc_interaction = dc_interaction.merge(\n    dc.drop(columns=[\"geometry\"]), left_on=\"focal\", right_index=True, how=\"left\"\n)\n\n\n# now merge destination attributes\ndc_interaction = dc_interaction.merge(\n    dc.drop(columns=[\"geometry\"]),\n    left_on=\"neighbor\",\n    right_index=True,\n    how=\"left\",\n    suffixes=[\"_origin\", \"_destination\"],\n)\n\nnote the suffixes differentiate columns referring to origin and destination values, e.g. median_household_income_origin and median_household_income_destination\n\ndc_interaction\n\n\n\n\n\n\n\n\nfocal\nneighbor\nweight\nn_mexican_pop_origin\nn_cuban_pop_origin\nn_puerto_rican_pop_origin\nn_russian_pop_origin\nn_italian_pop_origin\nn_german_pop_origin\nn_irish_pop_origin\n...\np_veterans_destination\np_poverty_rate_destination\np_poverty_rate_over_65_destination\np_poverty_rate_children_destination\np_poverty_rate_white_destination\np_poverty_rate_black_destination\np_poverty_rate_hispanic_destination\np_poverty_rate_native_destination\np_poverty_rate_asian_destination\nyear_destination\n\n\n\n\n0\n11001000101\n11001000101\n0.0\n102.0\n0.0\n0.0\n0.0\n68.0\n26.0\n59.0\n...\n6.245121\n2.341920\n0.000000\n0.000000\n2.341920\n0.000000\n2.341920\n0.000000\n0.0\n2021\n\n\n1\n11001000101\n11001000102\n23.0\n102.0\n0.0\n0.0\n0.0\n68.0\n26.0\n59.0\n...\n6.073753\n6.724512\n1.487450\n1.456461\n4.834211\n0.000000\n0.000000\n0.000000\n0.0\n2021\n\n\n2\n11001000101\n11001000202\n12.0\n102.0\n0.0\n0.0\n0.0\n68.0\n26.0\n59.0\n...\n3.525424\n12.948793\n2.472042\n0.000000\n10.829900\n0.588582\n0.824014\n0.000000\n0.0\n2021\n\n\n3\n11001000101\n11001000300\n0.0\n102.0\n0.0\n0.0\n0.0\n68.0\n26.0\n59.0\n...\n0.838082\n13.308750\n0.301710\n0.201140\n12.504190\n0.000000\n0.620181\n0.000000\n0.0\n2021\n\n\n4\n11001000101\n11001000501\n0.0\n102.0\n0.0\n0.0\n0.0\n68.0\n26.0\n59.0\n...\n0.993571\n8.556307\n1.705381\n0.000000\n2.087621\n6.380476\n0.529256\n0.000000\n0.0\n2021\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n42431\n11001980000\n11001011002\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n9.414088\n6.126617\n3.335602\n0.000000\n6.126617\n0.000000\n0.000000\n0.000000\n0.0\n2021\n\n\n42432\n11001980000\n11001011100\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n3.466872\n17.596308\n1.645265\n0.000000\n0.521669\n17.074639\n0.100321\n0.000000\n0.0\n2021\n\n\n42433\n11001980000\n11001000201\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.177755\n19.402985\n0.000000\n0.000000\n16.417910\n2.985075\n0.000000\n0.000000\n0.0\n2021\n\n\n42434\n11001980000\n11001006804\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n2.166193\n55.902778\n31.597222\n0.000000\n11.805556\n39.236111\n2.083333\n4.861111\n0.0\n2021\n\n\n42435\n11001980000\n11001980000\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.0\n2021\n\n\n\n\n42436 rows × 315 columns\n\n\n\n\ndc_interaction[\n    [\"weight\", \"median_household_income_origin\", \"median_household_income_destination\"]\n]\n\n\n\n\n\n\n\n\nweight\nmedian_household_income_origin\nmedian_household_income_destination\n\n\n\n\n0\n0.0\n157276.0\n157276.0\n\n\n1\n23.0\n157276.0\n166816.0\n\n\n2\n12.0\n157276.0\n161490.0\n\n\n3\n0.0\n157276.0\n159714.0\n\n\n4\n0.0\n157276.0\n109363.0\n\n\n...\n...\n...\n...\n\n\n42431\n0.0\nNaN\n110594.0\n\n\n42432\n0.0\nNaN\n74213.0\n\n\n42433\n0.0\nNaN\nNaN\n\n\n42434\n0.0\nNaN\n250001.0\n\n\n42435\n0.0\nNaN\nNaN\n\n\n\n\n42436 rows × 3 columns\n\n\n\nfor a spatial interaction model we also need another Graph that measures the distance between observations. There are many ways to do this, but the easiest is to use a distance band weight where all observations are guaranteed to lie within the threshold (giving us a pairwise matrix)\n\ndc = dc.to_crs(dc.estimate_utm_crs())\n\nkeep only tracts in the dataframe in our flow graph (origins), then get distance between observations with no decay\n\ndc = dc[dc.index.isin(dc_flow_graph.unique_ids)]\ndc_dist = Graph.build_distance_band(\n    dc.set_geometry(dc.centroid), threshold=1e20, binary=False, alpha=1\n)\n\n\ndc_dist.summary()\n\n\nGraph Summary Statistics\n\n\nNumber of nodes:\n206\n\n\nNumber of edges:\n42230\n\n\nNumber of connected components:\n1\n\n\nNumber of isolates:\n0\n\n\nNumber of non-zero edges:\n42230\n\n\nPercentage of non-zero edges:\n99.51%\n\n\nNumber of asymmetries:\nNA\n\n\n\n\n            \n\nSum of weights and Traces\n\n\nS0:\n264750122\nGG:\n2148736844278\n\n\nS1:\n4297473688556\nG'G:\n2148736844278\n\n\nS3:\n1435759541759836\nG'G + GG:\n4297473688556\n\n\n\n\n            \n                Graph indexed by: ['11001000101', '11001000102', '11001000201', '1100100020...]\n            \n\n\n\ndc_dist.adjacency\n\nfocal        neighbor   \n11001000101  11001000102     673.024487\n             11001000201    1714.423693\n             11001000202    1318.286816\n             11001000300    2086.439842\n             11001000400    1954.193812\n                               ...     \n11001980000  11001010800    2075.840579\n             11001010900    7660.568101\n             11001011001    1816.050530\n             11001011002    1999.546509\n             11001011100    7177.371175\nName: weight, Length: 42230, dtype: float64\n\n\n\n# subset the distance graph by the travel graph (remove destinations we dont need)\n# but this resets weights to 1\ndc_dist_adj = dc_dist.intersection(dc_flow_graph).adjacency\n\n\n# update with the old values\ndc_dist_adj.update(dc_dist.adjacency)\n\n/var/folders/j8/5bgcw6hs7cqcbbz48d6bsftw0000gp/T/ipykernel_76455/3611604903.py:2: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[ 673.02448689 1714.42369324 1318.28681649 ... 7734.28131571 2519.49437645\n  989.25225739]' has dtype incompatible with int8, please explicitly cast to a compatible dtype first.\n  dc_dist_adj.update(dc_dist.adjacency)\n\n\n\ndc_interaction[\"distance\"] = dc_dist.sparse.toarray().reshape(-1)\n\n\ndc_interaction['weight'] = dc_interaction['weight'].astype(int)\n\nfinally, we’ll do some simple cleanup since we have missing values etc.\n\n# mean-impute missing values\ndc_interaction = dc_interaction.fillna(dc_interaction.mean(numeric_only=True))\n\n# increment cols by 1 to make logs easier\ndc_interaction['distance'] = dc_interaction['distance'] +1\n\ndc_interaction['n_total_pop_origin'] = dc_interaction['n_total_pop_origin'] +1\ndc_interaction['n_total__pop_destination'] = dc_interaction['n_total_pop_destination'] +1\n\ndc_interaction['p_nonhisp_black_persons_origin'] = dc_interaction['p_nonhisp_black_persons_origin'] +1\ndc_interaction['p_nonhisp_black_persons_destination'] = dc_interaction['p_nonhisp_black_persons_destination'] +1\n\ndc_interaction = dc_interaction.copy()\n\n/var/folders/j8/5bgcw6hs7cqcbbz48d6bsftw0000gp/T/ipykernel_76455/3950422283.py:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  dc_interaction['n_total__pop_destination'] = dc_interaction['n_total_pop_destination'] +1\n\n\n\ndc_interaction\n\n\n\n\n\n\n\n\nfocal\nneighbor\nweight\nn_mexican_pop_origin\nn_cuban_pop_origin\nn_puerto_rican_pop_origin\nn_russian_pop_origin\nn_italian_pop_origin\nn_german_pop_origin\nn_irish_pop_origin\n...\np_poverty_rate_over_65_destination\np_poverty_rate_children_destination\np_poverty_rate_white_destination\np_poverty_rate_black_destination\np_poverty_rate_hispanic_destination\np_poverty_rate_native_destination\np_poverty_rate_asian_destination\nyear_destination\ndistance\nn_total__pop_destination\n\n\n\n\n0\n11001000101\n11001000101\n0\n102.0\n0.0\n0.0\n0.0\n68.0\n26.0\n59.0\n...\n0.000000\n0.000000\n2.341920\n0.000000\n2.341920\n0.000000\n0.0\n2021\n1.000000\n1282.0\n\n\n1\n11001000101\n11001000102\n23\n102.0\n0.0\n0.0\n0.0\n68.0\n26.0\n59.0\n...\n1.487450\n1.456461\n4.834211\n0.000000\n0.000000\n0.000000\n0.0\n2021\n674.024487\n3228.0\n\n\n2\n11001000101\n11001000202\n12\n102.0\n0.0\n0.0\n0.0\n68.0\n26.0\n59.0\n...\n2.472042\n0.000000\n10.829900\n0.588582\n0.824014\n0.000000\n0.0\n2021\n1715.423693\n4426.0\n\n\n3\n11001000101\n11001000300\n0\n102.0\n0.0\n0.0\n0.0\n68.0\n26.0\n59.0\n...\n0.301710\n0.201140\n12.504190\n0.000000\n0.620181\n0.000000\n0.0\n2021\n1319.286816\n5967.0\n\n\n4\n11001000101\n11001000501\n0\n102.0\n0.0\n0.0\n0.0\n68.0\n26.0\n59.0\n...\n1.705381\n0.000000\n2.087621\n6.380476\n0.529256\n0.000000\n0.0\n2021\n2087.439842\n3423.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n42431\n11001980000\n11001011002\n0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n3.335602\n0.000000\n6.126617\n0.000000\n0.000000\n0.000000\n0.0\n2021\n7661.568101\n1520.0\n\n\n42432\n11001980000\n11001011100\n0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n1.645265\n0.000000\n0.521669\n17.074639\n0.100321\n0.000000\n0.0\n2021\n1817.050530\n5193.0\n\n\n42433\n11001980000\n11001000201\n0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.000000\n0.000000\n16.417910\n2.985075\n0.000000\n0.000000\n0.0\n2021\n2000.546509\n3939.0\n\n\n42434\n11001980000\n11001006804\n0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n31.597222\n0.000000\n11.805556\n39.236111\n2.083333\n4.861111\n0.0\n2021\n7178.371175\n2817.0\n\n\n42435\n11001980000\n11001980000\n0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.0\n2021\n1.000000\n18.0\n\n\n\n\n42436 rows × 317 columns",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Migration Graphs and Spatial Interaction</span>"
    ]
  },
  {
    "objectID": "notebooks/02_spatial_interaction.html#using-spint-and-statsmodels",
    "href": "notebooks/02_spatial_interaction.html#using-spint-and-statsmodels",
    "title": "3  Migration Graphs and Spatial Interaction",
    "section": "3.5 Using spint and statsmodels",
    "text": "3.5 Using spint and statsmodels\nLiao and Oshan (2025), Taylor M. Oshan (2016), Taylor M. Oshan (2021), Taylor M. Oshan and Liao (2025), Rey et al. (2021), Wilson (1967)\nsee Taylor M. Oshan (2016) for a deeper discussion of spatial interaction models and their implementation details in PySAL. In thie example, we explore the influences of population size, income, and race (at origin and destination locations) on the total flow moving between origin and destination. Though this is a toy example, this approach combines traditional interaction variables i.e. gravity driven by population size) with an inquiry about social inequality. Since D.C. is such a famously segregated city, it may be that predominantly Black neighbrhoods are greater exporters than importers, like the spatial mismatch hypothesis suggests (Glaeser, Hanushek, and Quigley 2004; Kain 1968, 1992).\n\n3.5.1 Gravity\n\ng = Gravity(\n    dc_interaction[\"weight\"].values,\n    o_vars=dc_interaction[[\"n_total_pop_origin\", \"median_household_income_origin\", \"p_nonhisp_black_persons_origin\"]].values,\n    d_vars=dc_interaction[\n        [\"n_total_pop_destination\", \"median_household_income_destination\",  \"p_nonhisp_black_persons_destination\"]\n    ]\n    .values,\n    cost=dc_interaction[\"distance\"],\n    cost_func=\"exp\",\n    constant=True,\n).fit()\n\n\ng.params\n\narray([-1.30328257e+00,  6.72022888e-01,  1.40801006e-01,  4.76000489e-02,\n       -2.84857860e-01, -4.83240629e-02, -4.79830945e-01, -2.88418095e-05])\n\n\n\ng.adj_pseudoR2\n\nnp.float64(0.2064445085777441)\n\n\n\ndc_interaction[\"distance\"]\n\n0           1.000000\n1         674.024487\n2        1715.423693\n3        1319.286816\n4        2087.439842\n            ...     \n42431    7661.568101\n42432    1817.050530\n42433    2000.546509\n42434    7178.371175\n42435       1.000000\nName: distance, Length: 42436, dtype: float64\n\n\n\ng_statsmodels = smf.glm(\n    \"weight ~ 1 + np.log(n_total_pop_origin) + np.log(median_household_income_origin) + np.log(p_nonhisp_black_persons_origin) + np.log(n_total_pop_destination) + np.log(median_household_income_destination) + np.log(p_nonhisp_black_persons_destination) + distance\",\n    family=families.Poisson(),\n    data=dc_interaction,).fit(cov_type='HC0', scale='X2')\n\n\ng_statsmodels.summary()\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\nweight\nNo. Observations:\n42436\n\n\nModel:\nGLM\nDf Residuals:\n42428\n\n\nModel Family:\nPoisson\nDf Model:\n7\n\n\nLink Function:\nLog\nScale:\n28.247\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-10249.\n\n\nDate:\nWed, 23 Jul 2025\nDeviance:\n5.0560e+05\n\n\nTime:\n12:23:39\nPearson chi2:\n1.20e+06\n\n\nNo. Iterations:\n9\nPseudo R-squ. (CS):\n0.1181\n\n\nCovariance Type:\nHC0\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nIntercept\n-1.3110\n0.636\n-2.063\n0.039\n-2.557\n-0.065\n\n\nnp.log(n_total_pop_origin)\n0.6721\n0.044\n15.110\n0.000\n0.585\n0.759\n\n\nnp.log(median_household_income_origin)\n0.1408\n0.029\n4.817\n0.000\n0.084\n0.198\n\n\nnp.log(p_nonhisp_black_persons_origin)\n0.0476\n0.018\n2.660\n0.008\n0.013\n0.083\n\n\nnp.log(n_total_pop_destination)\n-0.2850\n0.009\n-31.810\n0.000\n-0.303\n-0.267\n\n\nnp.log(median_household_income_destination)\n-0.0478\n0.033\n-1.457\n0.145\n-0.112\n0.016\n\n\nnp.log(p_nonhisp_black_persons_destination)\n-0.4794\n0.012\n-38.890\n0.000\n-0.504\n-0.455\n\n\ndistance\n-2.884e-05\n4.53e-06\n-6.361\n0.000\n-3.77e-05\n-2e-05\n\n\n\n\n\n\ng.params.round(4)\n\narray([-1.3033,  0.672 ,  0.1408,  0.0476, -0.2849, -0.0483, -0.4798,\n       -0.    ])\n\n\n\nout = g_statsmodels.params.rename(\"statsmdodels\").to_frame().copy()\nout[\"spint\"] = g.params.T.round(4)\n\ncompare coefs in a table format\n\nout\n\n\n\n\n\n\n\n\nstatsmdodels\nspint\n\n\n\n\nIntercept\n-1.311015\n-1.3033\n\n\nnp.log(n_total_pop_origin)\n0.672147\n0.6720\n\n\nnp.log(median_household_income_origin)\n0.140799\n0.1408\n\n\nnp.log(p_nonhisp_black_persons_origin)\n0.047622\n0.0476\n\n\nnp.log(n_total_pop_destination)\n-0.285020\n-0.2849\n\n\nnp.log(median_household_income_destination)\n-0.047778\n-0.0483\n\n\nnp.log(p_nonhisp_black_persons_destination)\n-0.479354\n-0.4798\n\n\ndistance\n-0.000029\n-0.0000\n\n\n\n\n\n\n\n\n\n3.5.2 Production-Constrained\nunit-level fixed effects for origins\n\nmod_prod = Production(\n    dc_interaction[\"weight\"].values,\n    dc_interaction[\"focal\"].values,\n    d_vars=dc_interaction[\n        [\"n_total_pop_destination\", \"median_household_income_destination\", \"p_nonhisp_black_persons_destination\"]\n    ]\n    .values,\n    cost=dc_interaction[\"distance\"].values,\n    cost_func=\"exp\",\n).fit()\n\n\nmod_prod.params[-4:]\n\narray([-2.84911877e-01, -5.07558277e-02, -4.80596880e-01, -3.39053694e-05])\n\n\n\nmod_prod.adj_pseudoR2\n\nnp.float64(0.23213835591897392)\n\n\nalso do the power version/\n\nmod_prod_pow = Production(\n    dc_interaction[\"weight\"].values,\n    dc_interaction[\"focal\"].values,\n    d_vars=dc_interaction[\n        [\"n_total_pop_destination\", \"median_household_income_destination\", \"p_nonhisp_black_persons_destination\"]\n    ]\n    .values,\n    cost=dc_interaction[\"distance\"].values,\n    cost_func=\"pow\",\n).fit()\n\n\nmod_prod_pow.params[-4:]\n\narray([-0.28759278, -0.04250044, -0.47854842, -0.03982813])\n\n\n\nmod_prod_pow.adj_pseudoR2\n\nnp.float64(0.22975444627289543)\n\n\n\n\n3.5.3 Attraction-Constrained\nunit-level fixed effects for destinations\n\nmod_attr = Attraction(\n    flows=dc_interaction[\"weight\"].values,\n    destinations=dc_interaction[\"neighbor\"].values,\n    o_vars=dc_interaction[[\"n_total_pop_origin\", \"median_household_income_origin\",  \"p_nonhisp_black_persons_origin\"]]\n    .values,\n    cost=dc_interaction[\"distance\"].values,\n    cost_func=\"exp\",\n)\n\nthe constrained models can be calibrated locally, i.e. each observation has its own set of coefficients, thus we can map the effect of a given parameter, say distance:\n\nattr_local = pd.DataFrame(mod_attr.local())\n\n\nattr_local.columns\n\nIndex(['AIC', 'deviance', 'pseudoR2', 'adj_pseudoR2', 'D2', 'adj_D2', 'SSI',\n       'SRMSE', 'param0', 'stde0', 'pvalue0', 'tvalue0', 'param1', 'stde1',\n       'pvalue1', 'tvalue1', 'param2', 'stde2', 'pvalue2', 'tvalue2', 'param3',\n       'stde3', 'pvalue3', 'tvalue3'],\n      dtype='object')\n\n\n\ndc.assign(dist=attr_local['param3'].values).explore('dist', scheme='quantiles', tooltip='dist',  cmap='RdBu_r',   style_kwds={\"weight\": 0.5},\n tiles='cartodb positron')\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nmod_attr.fit()\n\n&lt;spint.count_model.CountModelResults at 0x35cf4b440&gt;\n\n\n\nmod_attr.params[-4:]\n\narray([ 6.74477248e-01,  1.45735531e-01,  4.61204174e-02, -1.19007021e-05])\n\n\n\nmod_attr.pseudoR2\n\nnp.float64(0.7394749340844884)\n\n\n\n# attraction-constrained\na_statsmodels = smf.glm(\n    \"weight ~ 1 + I(neighbor) + np.log(n_total_pop_origin) + np.log(median_household_income_origin) + np.log(p_nonhisp_black_persons_origin) + distance\",\n    family=families.Poisson(),\n    data=dc_interaction\n).fit()\n\n\na_statsmodels.summary()\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\nweight\nNo. Observations:\n42436\n\n\nModel:\nGLM\nDf Residuals:\n42226\n\n\nModel Family:\nPoisson\nDf Model:\n209\n\n\nLink Function:\nLog\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-94971.\n\n\nDate:\nWed, 23 Jul 2025\nDeviance:\n1.1656e+05\n\n\nTime:\n12:23:43\nPearson chi2:\n1.32e+05\n\n\nNo. Iterations:\n8\nPseudo R-squ. (CS):\n1.000\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nIntercept\n-7.7468\n0.120\n-64.487\n0.000\n-7.982\n-7.511\n\n\nI(neighbor)[T.11001000102]\n3.1373\n0.090\n34.880\n0.000\n2.961\n3.314\n\n\nI(neighbor)[T.11001000201]\n3.4699\n0.089\n38.804\n0.000\n3.295\n3.645\n\n\nI(neighbor)[T.11001000202]\n2.8744\n0.091\n31.750\n0.000\n2.697\n3.052\n\n\nI(neighbor)[T.11001000300]\n0.7745\n0.107\n7.265\n0.000\n0.566\n0.983\n\n\nI(neighbor)[T.11001000400]\n1.4074\n0.098\n14.335\n0.000\n1.215\n1.600\n\n\nI(neighbor)[T.11001000501]\n1.1021\n0.102\n10.826\n0.000\n0.903\n1.302\n\n\nI(neighbor)[T.11001000502]\n0.3071\n0.116\n2.649\n0.008\n0.080\n0.534\n\n\nI(neighbor)[T.11001000600]\n1.4798\n0.098\n15.175\n0.000\n1.289\n1.671\n\n\nI(neighbor)[T.11001000702]\n-0.9011\n0.164\n-5.485\n0.000\n-1.223\n-0.579\n\n\nI(neighbor)[T.11001000703]\n-1.4589\n0.203\n-7.198\n0.000\n-1.856\n-1.062\n\n\nI(neighbor)[T.11001000704]\n-0.6504\n0.151\n-4.319\n0.000\n-0.946\n-0.355\n\n\nI(neighbor)[T.11001000802]\n0.6872\n0.108\n6.373\n0.000\n0.476\n0.899\n\n\nI(neighbor)[T.11001000803]\n0.6246\n0.109\n5.713\n0.000\n0.410\n0.839\n\n\nI(neighbor)[T.11001000804]\n1.0396\n0.103\n10.127\n0.000\n0.838\n1.241\n\n\nI(neighbor)[T.11001000902]\n0.2520\n0.118\n2.139\n0.032\n0.021\n0.483\n\n\nI(neighbor)[T.11001000903]\n2.2282\n0.093\n24.048\n0.000\n2.047\n2.410\n\n\nI(neighbor)[T.11001000904]\n1.7655\n0.095\n18.540\n0.000\n1.579\n1.952\n\n\nI(neighbor)[T.11001001002]\n2.1743\n0.093\n23.408\n0.000\n1.992\n2.356\n\n\nI(neighbor)[T.11001001003]\n-0.0901\n0.127\n-0.709\n0.479\n-0.339\n0.159\n\n\nI(neighbor)[T.11001001004]\n1.8086\n0.095\n19.019\n0.000\n1.622\n1.995\n\n\nI(neighbor)[T.11001001100]\n2.5528\n0.091\n27.937\n0.000\n2.374\n2.732\n\n\nI(neighbor)[T.11001001200]\n1.6829\n0.096\n17.518\n0.000\n1.495\n1.871\n\n\nI(neighbor)[T.11001001301]\n-0.1733\n0.131\n-1.322\n0.186\n-0.430\n0.084\n\n\nI(neighbor)[T.11001001303]\n1.2923\n0.100\n12.960\n0.000\n1.097\n1.488\n\n\nI(neighbor)[T.11001001304]\n0.6917\n0.109\n6.365\n0.000\n0.479\n0.905\n\n\nI(neighbor)[T.11001001401]\n0.2941\n0.116\n2.534\n0.011\n0.067\n0.522\n\n\nI(neighbor)[T.11001001402]\n1.1050\n0.102\n10.831\n0.000\n0.905\n1.305\n\n\nI(neighbor)[T.11001001500]\n0.6816\n0.108\n6.321\n0.000\n0.470\n0.893\n\n\nI(neighbor)[T.11001001600]\n1.9566\n0.094\n20.813\n0.000\n1.772\n2.141\n\n\nI(neighbor)[T.11001001702]\n1.3299\n0.099\n13.447\n0.000\n1.136\n1.524\n\n\nI(neighbor)[T.11001001803]\n-1.1805\n0.185\n-6.395\n0.000\n-1.542\n-0.819\n\n\nI(neighbor)[T.11001001804]\n-0.0585\n0.126\n-0.465\n0.642\n-0.306\n0.188\n\n\nI(neighbor)[T.11001001901]\n1.8317\n0.095\n19.330\n0.000\n1.646\n2.017\n\n\nI(neighbor)[T.11001001902]\n0.3712\n0.115\n3.229\n0.001\n0.146\n0.597\n\n\nI(neighbor)[T.11001002001]\n0.3759\n0.114\n3.295\n0.001\n0.152\n0.600\n\n\nI(neighbor)[T.11001002002]\n0.2936\n0.116\n2.530\n0.011\n0.066\n0.521\n\n\nI(neighbor)[T.11001002101]\n1.0348\n0.102\n10.110\n0.000\n0.834\n1.235\n\n\nI(neighbor)[T.11001002102]\n0.4956\n0.111\n4.446\n0.000\n0.277\n0.714\n\n\nI(neighbor)[T.11001002201]\n-0.1581\n0.131\n-1.206\n0.228\n-0.415\n0.099\n\n\nI(neighbor)[T.11001002202]\n-1.3433\n0.193\n-6.968\n0.000\n-1.721\n-0.965\n\n\nI(neighbor)[T.11001002301]\n-0.1697\n0.130\n-1.307\n0.191\n-0.424\n0.085\n\n\nI(neighbor)[T.11001002302]\n3.5550\n0.089\n39.817\n0.000\n3.380\n3.730\n\n\nI(neighbor)[T.11001002400]\n0.8142\n0.106\n7.659\n0.000\n0.606\n1.023\n\n\nI(neighbor)[T.11001002501]\n0.7452\n0.108\n6.932\n0.000\n0.535\n0.956\n\n\nI(neighbor)[T.11001002503]\n0.9686\n0.103\n9.378\n0.000\n0.766\n1.171\n\n\nI(neighbor)[T.11001002504]\n-0.3571\n0.137\n-2.608\n0.009\n-0.625\n-0.089\n\n\nI(neighbor)[T.11001002600]\n-0.4700\n0.143\n-3.290\n0.001\n-0.750\n-0.190\n\n\nI(neighbor)[T.11001002702]\n0.7106\n0.108\n6.590\n0.000\n0.499\n0.922\n\n\nI(neighbor)[T.11001002703]\n0.2445\n0.117\n2.083\n0.037\n0.014\n0.475\n\n\nI(neighbor)[T.11001002704]\n-0.3402\n0.136\n-2.493\n0.013\n-0.608\n-0.073\n\n\nI(neighbor)[T.11001002801]\n0.0422\n0.124\n0.341\n0.733\n-0.200\n0.284\n\n\nI(neighbor)[T.11001002802]\n1.7845\n0.095\n18.747\n0.000\n1.598\n1.971\n\n\nI(neighbor)[T.11001002900]\n1.1590\n0.101\n11.491\n0.000\n0.961\n1.357\n\n\nI(neighbor)[T.11001003000]\n0.1594\n0.121\n1.319\n0.187\n-0.077\n0.396\n\n\nI(neighbor)[T.11001003100]\n0.9138\n0.105\n8.732\n0.000\n0.709\n1.119\n\n\nI(neighbor)[T.11001003200]\n0.6058\n0.110\n5.497\n0.000\n0.390\n0.822\n\n\nI(neighbor)[T.11001003301]\n-0.1879\n0.131\n-1.437\n0.151\n-0.444\n0.068\n\n\nI(neighbor)[T.11001003302]\n0.1405\n0.122\n1.155\n0.248\n-0.098\n0.379\n\n\nI(neighbor)[T.11001003400]\n2.3600\n0.092\n25.621\n0.000\n2.179\n2.541\n\n\nI(neighbor)[T.11001003500]\n1.6378\n0.096\n16.978\n0.000\n1.449\n1.827\n\n\nI(neighbor)[T.11001003600]\n0.8725\n0.105\n8.290\n0.000\n0.666\n1.079\n\n\nI(neighbor)[T.11001003701]\n0.2179\n0.118\n1.841\n0.066\n-0.014\n0.450\n\n\nI(neighbor)[T.11001003702]\n-0.5118\n0.143\n-3.568\n0.000\n-0.793\n-0.231\n\n\nI(neighbor)[T.11001003801]\n1.4513\n0.098\n14.848\n0.000\n1.260\n1.643\n\n\nI(neighbor)[T.11001003802]\n1.4861\n0.097\n15.254\n0.000\n1.295\n1.677\n\n\nI(neighbor)[T.11001003901]\n0.7731\n0.107\n7.253\n0.000\n0.564\n0.982\n\n\nI(neighbor)[T.11001003902]\n0.0080\n0.125\n0.064\n0.949\n-0.237\n0.253\n\n\nI(neighbor)[T.11001004001]\n0.6793\n0.108\n6.287\n0.000\n0.467\n0.891\n\n\nI(neighbor)[T.11001004002]\n2.0755\n0.094\n22.192\n0.000\n1.892\n2.259\n\n\nI(neighbor)[T.11001004100]\n0.6419\n0.109\n5.905\n0.000\n0.429\n0.855\n\n\nI(neighbor)[T.11001004201]\n1.6202\n0.096\n16.816\n0.000\n1.431\n1.809\n\n\nI(neighbor)[T.11001004202]\n1.9987\n0.094\n21.300\n0.000\n1.815\n2.183\n\n\nI(neighbor)[T.11001004300]\n1.7464\n0.096\n18.274\n0.000\n1.559\n1.934\n\n\nI(neighbor)[T.11001004401]\n1.8972\n0.094\n20.089\n0.000\n1.712\n2.082\n\n\nI(neighbor)[T.11001004402]\n1.6414\n0.096\n17.039\n0.000\n1.453\n1.830\n\n\nI(neighbor)[T.11001004600]\n1.8355\n0.095\n19.347\n0.000\n1.650\n2.021\n\n\nI(neighbor)[T.11001004702]\n2.7927\n0.091\n30.778\n0.000\n2.615\n2.971\n\n\nI(neighbor)[T.11001004703]\n1.2668\n0.100\n12.700\n0.000\n1.071\n1.462\n\n\nI(neighbor)[T.11001004704]\n0.6303\n0.109\n5.782\n0.000\n0.417\n0.844\n\n\nI(neighbor)[T.11001004801]\n2.3290\n0.092\n25.251\n0.000\n2.148\n2.510\n\n\nI(neighbor)[T.11001004802]\n1.8692\n0.095\n19.754\n0.000\n1.684\n2.055\n\n\nI(neighbor)[T.11001004901]\n1.3067\n0.099\n13.158\n0.000\n1.112\n1.501\n\n\nI(neighbor)[T.11001004902]\n2.1649\n0.093\n23.287\n0.000\n1.983\n2.347\n\n\nI(neighbor)[T.11001005001]\n1.2067\n0.100\n12.008\n0.000\n1.010\n1.404\n\n\nI(neighbor)[T.11001005003]\n1.2464\n0.100\n12.468\n0.000\n1.050\n1.442\n\n\nI(neighbor)[T.11001005004]\n-0.0175\n0.125\n-0.140\n0.889\n-0.263\n0.228\n\n\nI(neighbor)[T.11001005202]\n1.8055\n0.095\n19.002\n0.000\n1.619\n1.992\n\n\nI(neighbor)[T.11001005203]\n1.4658\n0.098\n15.012\n0.000\n1.274\n1.657\n\n\nI(neighbor)[T.11001005302]\n1.1004\n0.102\n10.824\n0.000\n0.901\n1.300\n\n\nI(neighbor)[T.11001005303]\n2.3340\n0.092\n25.311\n0.000\n2.153\n2.515\n\n\nI(neighbor)[T.11001005501]\n3.6967\n0.089\n41.441\n0.000\n3.522\n3.872\n\n\nI(neighbor)[T.11001005502]\n2.5902\n0.091\n28.326\n0.000\n2.411\n2.769\n\n\nI(neighbor)[T.11001005503]\n2.4465\n0.092\n26.653\n0.000\n2.267\n2.626\n\n\nI(neighbor)[T.11001005601]\n1.2029\n0.101\n11.962\n0.000\n1.006\n1.400\n\n\nI(neighbor)[T.11001005602]\n2.1019\n0.093\n22.489\n0.000\n1.919\n2.285\n\n\nI(neighbor)[T.11001005801]\n3.6990\n0.089\n41.478\n0.000\n3.524\n3.874\n\n\nI(neighbor)[T.11001005802]\n5.0321\n0.088\n56.956\n0.000\n4.859\n5.205\n\n\nI(neighbor)[T.11001005900]\n3.5547\n0.089\n39.792\n0.000\n3.380\n3.730\n\n\nI(neighbor)[T.11001006400]\n0.6191\n0.109\n5.670\n0.000\n0.405\n0.833\n\n\nI(neighbor)[T.11001006500]\n2.2543\n0.093\n24.316\n0.000\n2.073\n2.436\n\n\nI(neighbor)[T.11001006600]\n1.7724\n0.096\n18.556\n0.000\n1.585\n1.960\n\n\nI(neighbor)[T.11001006700]\n1.5424\n0.097\n15.859\n0.000\n1.352\n1.733\n\n\nI(neighbor)[T.11001006801]\n-0.6552\n0.151\n-4.329\n0.000\n-0.952\n-0.359\n\n\nI(neighbor)[T.11001006802]\n0.1838\n0.120\n1.536\n0.125\n-0.051\n0.418\n\n\nI(neighbor)[T.11001006804]\n0.4948\n0.112\n4.423\n0.000\n0.276\n0.714\n\n\nI(neighbor)[T.11001006900]\n1.2475\n0.100\n12.472\n0.000\n1.051\n1.444\n\n\nI(neighbor)[T.11001007000]\n1.9211\n0.094\n20.333\n0.000\n1.736\n2.106\n\n\nI(neighbor)[T.11001007100]\n1.1790\n0.101\n11.678\n0.000\n0.981\n1.377\n\n\nI(neighbor)[T.11001007201]\n2.2570\n0.093\n24.390\n0.000\n2.076\n2.438\n\n\nI(neighbor)[T.11001007202]\n1.6971\n0.096\n17.695\n0.000\n1.509\n1.885\n\n\nI(neighbor)[T.11001007203]\n2.4599\n0.092\n26.790\n0.000\n2.280\n2.640\n\n\nI(neighbor)[T.11001007301]\n0.4629\n0.113\n4.091\n0.000\n0.241\n0.685\n\n\nI(neighbor)[T.11001007304]\n0.7059\n0.108\n6.546\n0.000\n0.495\n0.917\n\n\nI(neighbor)[T.11001007401]\n0.1772\n0.120\n1.480\n0.139\n-0.057\n0.412\n\n\nI(neighbor)[T.11001007403]\n-0.8102\n0.160\n-5.063\n0.000\n-1.124\n-0.497\n\n\nI(neighbor)[T.11001007404]\n-1.4864\n0.206\n-7.232\n0.000\n-1.889\n-1.084\n\n\nI(neighbor)[T.11001007406]\n-0.3305\n0.136\n-2.430\n0.015\n-0.597\n-0.064\n\n\nI(neighbor)[T.11001007407]\n-0.6377\n0.151\n-4.214\n0.000\n-0.934\n-0.341\n\n\nI(neighbor)[T.11001007408]\n-0.1747\n0.131\n-1.329\n0.184\n-0.432\n0.083\n\n\nI(neighbor)[T.11001007409]\n-0.4120\n0.141\n-2.917\n0.004\n-0.689\n-0.135\n\n\nI(neighbor)[T.11001007502]\n0.1532\n0.121\n1.264\n0.206\n-0.084\n0.391\n\n\nI(neighbor)[T.11001007503]\n1.3348\n0.099\n13.442\n0.000\n1.140\n1.529\n\n\nI(neighbor)[T.11001007504]\n-0.2860\n0.134\n-2.128\n0.033\n-0.549\n-0.023\n\n\nI(neighbor)[T.11001007601]\n0.4407\n0.113\n3.903\n0.000\n0.219\n0.662\n\n\nI(neighbor)[T.11001007603]\n0.2181\n0.118\n1.846\n0.065\n-0.014\n0.450\n\n\nI(neighbor)[T.11001007604]\n-0.6119\n0.148\n-4.122\n0.000\n-0.903\n-0.321\n\n\nI(neighbor)[T.11001007605]\n-0.3083\n0.135\n-2.280\n0.023\n-0.573\n-0.043\n\n\nI(neighbor)[T.11001007703]\n-0.3536\n0.137\n-2.583\n0.010\n-0.622\n-0.085\n\n\nI(neighbor)[T.11001007707]\n-1.3104\n0.191\n-6.875\n0.000\n-1.684\n-0.937\n\n\nI(neighbor)[T.11001007708]\n-1.4019\n0.197\n-7.098\n0.000\n-1.789\n-1.015\n\n\nI(neighbor)[T.11001007709]\n-1.0379\n0.172\n-6.044\n0.000\n-1.374\n-0.701\n\n\nI(neighbor)[T.11001007803]\n1.4294\n0.098\n14.584\n0.000\n1.237\n1.622\n\n\nI(neighbor)[T.11001007804]\n0.4127\n0.113\n3.640\n0.000\n0.190\n0.635\n\n\nI(neighbor)[T.11001007806]\n-0.3551\n0.137\n-2.594\n0.009\n-0.623\n-0.087\n\n\nI(neighbor)[T.11001007807]\n-1.7791\n0.231\n-7.713\n0.000\n-2.231\n-1.327\n\n\nI(neighbor)[T.11001007808]\n-0.0670\n0.127\n-0.529\n0.597\n-0.315\n0.181\n\n\nI(neighbor)[T.11001007809]\n-0.1239\n0.128\n-0.966\n0.334\n-0.375\n0.127\n\n\nI(neighbor)[T.11001007901]\n0.5594\n0.110\n5.073\n0.000\n0.343\n0.775\n\n\nI(neighbor)[T.11001007903]\n-0.7701\n0.156\n-4.928\n0.000\n-1.076\n-0.464\n\n\nI(neighbor)[T.11001008001]\n0.7079\n0.107\n6.586\n0.000\n0.497\n0.919\n\n\nI(neighbor)[T.11001008002]\n0.6745\n0.108\n6.243\n0.000\n0.463\n0.886\n\n\nI(neighbor)[T.11001008100]\n0.1901\n0.119\n1.599\n0.110\n-0.043\n0.423\n\n\nI(neighbor)[T.11001008200]\n1.3882\n0.098\n14.108\n0.000\n1.195\n1.581\n\n\nI(neighbor)[T.11001008301]\n1.3839\n0.098\n14.056\n0.000\n1.191\n1.577\n\n\nI(neighbor)[T.11001008302]\n1.2899\n0.099\n12.972\n0.000\n1.095\n1.485\n\n\nI(neighbor)[T.11001008402]\n0.8752\n0.105\n8.328\n0.000\n0.669\n1.081\n\n\nI(neighbor)[T.11001008410]\n0.6252\n0.109\n5.735\n0.000\n0.412\n0.839\n\n\nI(neighbor)[T.11001008701]\n0.7956\n0.106\n7.506\n0.000\n0.588\n1.003\n\n\nI(neighbor)[T.11001008702]\n0.7190\n0.107\n6.706\n0.000\n0.509\n0.929\n\n\nI(neighbor)[T.11001008802]\n0.4855\n0.112\n4.344\n0.000\n0.266\n0.705\n\n\nI(neighbor)[T.11001008803]\n2.4719\n0.092\n26.967\n0.000\n2.292\n2.652\n\n\nI(neighbor)[T.11001008804]\n1.0422\n0.102\n10.185\n0.000\n0.842\n1.243\n\n\nI(neighbor)[T.11001008903]\n-0.5675\n0.146\n-3.875\n0.000\n-0.855\n-0.280\n\n\nI(neighbor)[T.11001008904]\n0.6944\n0.108\n6.444\n0.000\n0.483\n0.906\n\n\nI(neighbor)[T.11001009000]\n1.3149\n0.099\n13.244\n0.000\n1.120\n1.510\n\n\nI(neighbor)[T.11001009102]\n2.4598\n0.092\n26.804\n0.000\n2.280\n2.640\n\n\nI(neighbor)[T.11001009201]\n1.5087\n0.097\n15.520\n0.000\n1.318\n1.699\n\n\nI(neighbor)[T.11001009203]\n-0.8474\n0.161\n-5.262\n0.000\n-1.163\n-0.532\n\n\nI(neighbor)[T.11001009204]\n1.2908\n0.100\n12.955\n0.000\n1.096\n1.486\n\n\nI(neighbor)[T.11001009301]\n1.2102\n0.101\n12.038\n0.000\n1.013\n1.407\n\n\nI(neighbor)[T.11001009302]\n0.8965\n0.105\n8.564\n0.000\n0.691\n1.102\n\n\nI(neighbor)[T.11001009400]\n1.2076\n0.100\n12.019\n0.000\n1.011\n1.404\n\n\nI(neighbor)[T.11001009503]\n-0.5110\n0.144\n-3.549\n0.000\n-0.793\n-0.229\n\n\nI(neighbor)[T.11001009504]\n1.9580\n0.094\n20.818\n0.000\n1.774\n2.142\n\n\nI(neighbor)[T.11001009505]\n1.5636\n0.097\n16.164\n0.000\n1.374\n1.753\n\n\nI(neighbor)[T.11001009507]\n-2.3528\n0.302\n-7.796\n0.000\n-2.944\n-1.761\n\n\nI(neighbor)[T.11001009508]\n0.0998\n0.121\n0.823\n0.410\n-0.138\n0.337\n\n\nI(neighbor)[T.11001009509]\n-0.0743\n0.127\n-0.583\n0.560\n-0.324\n0.175\n\n\nI(neighbor)[T.11001009510]\n0.1091\n0.122\n0.895\n0.371\n-0.130\n0.348\n\n\nI(neighbor)[T.11001009511]\n-1.6115\n0.215\n-7.496\n0.000\n-2.033\n-1.190\n\n\nI(neighbor)[T.11001009601]\n-0.2521\n0.134\n-1.887\n0.059\n-0.514\n0.010\n\n\nI(neighbor)[T.11001009602]\n0.1262\n0.122\n1.034\n0.301\n-0.113\n0.366\n\n\nI(neighbor)[T.11001009603]\n1.2662\n0.100\n12.635\n0.000\n1.070\n1.463\n\n\nI(neighbor)[T.11001009604]\n0.0853\n0.123\n0.691\n0.489\n-0.157\n0.327\n\n\nI(neighbor)[T.11001009700]\n-0.3999\n0.141\n-2.841\n0.004\n-0.676\n-0.124\n\n\nI(neighbor)[T.11001009801]\n-1.3133\n0.191\n-6.891\n0.000\n-1.687\n-0.940\n\n\nI(neighbor)[T.11001009802]\n-2.0500\n0.265\n-7.734\n0.000\n-2.570\n-1.531\n\n\nI(neighbor)[T.11001009803]\n-1.0842\n0.175\n-6.210\n0.000\n-1.426\n-0.742\n\n\nI(neighbor)[T.11001009804]\n-0.2259\n0.134\n-1.686\n0.092\n-0.489\n0.037\n\n\nI(neighbor)[T.11001009807]\n0.3270\n0.117\n2.799\n0.005\n0.098\n0.556\n\n\nI(neighbor)[T.11001009810]\n-1.9747\n0.258\n-7.652\n0.000\n-2.480\n-1.469\n\n\nI(neighbor)[T.11001009811]\n0.4945\n0.112\n4.408\n0.000\n0.275\n0.714\n\n\nI(neighbor)[T.11001009901]\n0.6434\n0.109\n5.884\n0.000\n0.429\n0.858\n\n\nI(neighbor)[T.11001009902]\n-1.7727\n0.235\n-7.533\n0.000\n-2.234\n-1.311\n\n\nI(neighbor)[T.11001009903]\n-0.7473\n0.157\n-4.755\n0.000\n-1.055\n-0.439\n\n\nI(neighbor)[T.11001009904]\n-0.3421\n0.138\n-2.474\n0.013\n-0.613\n-0.071\n\n\nI(neighbor)[T.11001009905]\n-1.5338\n0.212\n-7.247\n0.000\n-1.949\n-1.119\n\n\nI(neighbor)[T.11001009906]\n-1.9398\n0.252\n-7.709\n0.000\n-2.433\n-1.447\n\n\nI(neighbor)[T.11001009907]\n-0.5915\n0.147\n-4.021\n0.000\n-0.880\n-0.303\n\n\nI(neighbor)[T.11001010100]\n4.7682\n0.088\n53.927\n0.000\n4.595\n4.941\n\n\nI(neighbor)[T.11001010201]\n0.6856\n0.108\n6.358\n0.000\n0.474\n0.897\n\n\nI(neighbor)[T.11001010202]\n3.6719\n0.089\n41.184\n0.000\n3.497\n3.847\n\n\nI(neighbor)[T.11001010300]\n0.7109\n0.108\n6.574\n0.000\n0.499\n0.923\n\n\nI(neighbor)[T.11001010400]\n1.9867\n0.094\n21.120\n0.000\n1.802\n2.171\n\n\nI(neighbor)[T.11001010500]\n2.0277\n0.094\n21.651\n0.000\n1.844\n2.211\n\n\nI(neighbor)[T.11001010601]\n3.5802\n0.089\n40.113\n0.000\n3.405\n3.755\n\n\nI(neighbor)[T.11001010602]\n2.1489\n0.093\n23.107\n0.000\n1.967\n2.331\n\n\nI(neighbor)[T.11001010603]\n3.4056\n0.089\n38.059\n0.000\n3.230\n3.581\n\n\nI(neighbor)[T.11001010700]\n5.3132\n0.088\n60.198\n0.000\n5.140\n5.486\n\n\nI(neighbor)[T.11001010800]\n3.9496\n0.089\n44.434\n0.000\n3.775\n4.124\n\n\nI(neighbor)[T.11001010900]\n0.8752\n0.105\n8.353\n0.000\n0.670\n1.081\n\n\nI(neighbor)[T.11001011001]\n-1.2830\n0.188\n-6.807\n0.000\n-1.652\n-0.914\n\n\nI(neighbor)[T.11001011002]\n0.3415\n0.117\n2.919\n0.004\n0.112\n0.571\n\n\nI(neighbor)[T.11001011100]\n2.5251\n0.092\n27.592\n0.000\n2.346\n2.705\n\n\nI(neighbor)[T.11001980000]\n4.6257\n0.088\n52.281\n0.000\n4.452\n4.799\n\n\nnp.log(n_total_pop_origin)\n0.6802\n0.007\n96.874\n0.000\n0.666\n0.694\n\n\nnp.log(median_household_income_origin)\n0.1475\n0.005\n29.365\n0.000\n0.138\n0.157\n\n\nnp.log(p_nonhisp_black_persons_origin)\n0.0464\n0.003\n17.165\n0.000\n0.041\n0.052\n\n\ndistance\n-1.183e-05\n7.69e-07\n-15.379\n0.000\n-1.33e-05\n-1.03e-05\n\n\n\n\n\n\nmod_attr.pseudoR2\n\nnp.float64(0.7394749340844884)\n\n\n\nmod_attr.params[-4:].round(4)\n\narray([ 0.6745,  0.1457,  0.0461, -0.    ])\n\n\n\na_statsmodels.params[-4:]\n\nnp.log(n_total_pop_origin)                0.680187\nnp.log(median_household_income_origin)    0.147455\nnp.log(p_nonhisp_black_persons_origin)    0.046415\ndistance                                 -0.000012\ndtype: float64\n\n\n\n# mcfadden\n1 - (a_statsmodels.llf / a_statsmodels.llnull)\n\nnp.float64(0.7396697682685844)\n\n\n\n# cohen\n(a_statsmodels.null_deviance - a_statsmodels.deviance) / a_statsmodels.null_deviance\n\nnp.float64(0.822375364673833)\n\n\n\n# CS\n1 - np.exp((2 / a_statsmodels.nobs) * (a_statsmodels.llnull - a_statsmodels.llf))\n\nnp.float64(0.9999970016617493)\n\n\n\na_statsmodels.pseudo_rsquared()\n\nnp.float64(0.9999970016617493)\n\n\nyep, the CS psueudo \\(R^2\\) matches the reported one\n\n\n3.5.4 Doubly-Constrained\nfixed effects for both origin and destination\n\nd = Doubly(\n    dc_interaction[\"weight\"].values,\n    dc_interaction[\"focal\"].values,\n    dc_interaction[\"neighbor\"].values,\n    cost=dc_interaction[\"distance\"],\n    cost_func=\"exp\",\n).fit()\n\n\nd.adj_pseudoR2\n\nnp.float64(0.7644170768314439)\n\n\n\nd.params[-1:].round(5)\n\narray([-2.e-05])\n\n\n\nd_statsmodels = smf.glm(\n    \"weight ~ 1 + C(focal) + C(neighbor) + distance\",\n    family=families.Poisson(),\n    data=dc_interaction\n).fit()\n\n\nd_statsmodels.summary()\n\n\nGeneralized Linear Model Regression Results\n\n\nDep. Variable:\nweight\nNo. Observations:\n42436\n\n\nModel:\nGLM\nDf Residuals:\n42024\n\n\nModel Family:\nPoisson\nDf Model:\n411\n\n\nLink Function:\nLog\nScale:\n1.0000\n\n\nMethod:\nIRLS\nLog-Likelihood:\n-85400.\n\n\nDate:\nWed, 23 Jul 2025\nDeviance:\n97423.\n\n\nTime:\n12:24:10\nPearson chi2:\n1.16e+05\n\n\nNo. Iterations:\n8\nPseudo R-squ. (CS):\n1.000\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nIntercept\n-1.1748\n0.100\n-11.723\n0.000\n-1.371\n-0.978\n\n\nC(focal)[T.11001000102]\n0.5283\n0.060\n8.759\n0.000\n0.410\n0.647\n\n\nC(focal)[T.11001000201]\n-1.8993\n0.132\n-14.384\n0.000\n-2.158\n-1.640\n\n\nC(focal)[T.11001000202]\n0.6000\n0.060\n10.044\n0.000\n0.483\n0.717\n\n\nC(focal)[T.11001000300]\n1.2141\n0.055\n22.265\n0.000\n1.107\n1.321\n\n\nC(focal)[T.11001000400]\n0.0840\n0.066\n1.269\n0.205\n-0.046\n0.214\n\n\nC(focal)[T.11001000501]\n1.0136\n0.056\n18.091\n0.000\n0.904\n1.123\n\n\nC(focal)[T.11001000502]\n0.8584\n0.057\n15.046\n0.000\n0.747\n0.970\n\n\nC(focal)[T.11001000600]\n0.9553\n0.056\n16.992\n0.000\n0.845\n1.066\n\n\nC(focal)[T.11001000702]\n0.8953\n0.057\n15.732\n0.000\n0.784\n1.007\n\n\nC(focal)[T.11001000703]\n0.2330\n0.064\n3.634\n0.000\n0.107\n0.359\n\n\nC(focal)[T.11001000704]\n0.4880\n0.061\n8.007\n0.000\n0.369\n0.607\n\n\nC(focal)[T.11001000802]\n0.5885\n0.060\n9.886\n0.000\n0.472\n0.705\n\n\nC(focal)[T.11001000803]\n0.1124\n0.066\n1.693\n0.090\n-0.018\n0.242\n\n\nC(focal)[T.11001000804]\n0.4014\n0.062\n6.449\n0.000\n0.279\n0.523\n\n\nC(focal)[T.11001000902]\n0.1208\n0.066\n1.821\n0.069\n-0.009\n0.251\n\n\nC(focal)[T.11001000903]\n-0.6744\n0.082\n-8.198\n0.000\n-0.836\n-0.513\n\n\nC(focal)[T.11001000904]\n0.3101\n0.063\n4.939\n0.000\n0.187\n0.433\n\n\nC(focal)[T.11001001002]\n0.5863\n0.060\n9.851\n0.000\n0.470\n0.703\n\n\nC(focal)[T.11001001003]\n0.5258\n0.060\n8.742\n0.000\n0.408\n0.644\n\n\nC(focal)[T.11001001004]\n0.8352\n0.058\n14.500\n0.000\n0.722\n0.948\n\n\nC(focal)[T.11001001100]\n0.9782\n0.056\n17.474\n0.000\n0.868\n1.088\n\n\nC(focal)[T.11001001200]\n1.2291\n0.055\n22.499\n0.000\n1.122\n1.336\n\n\nC(focal)[T.11001001301]\n0.9887\n0.056\n17.516\n0.000\n0.878\n1.099\n\n\nC(focal)[T.11001001303]\n0.8587\n0.058\n14.917\n0.000\n0.746\n0.972\n\n\nC(focal)[T.11001001304]\n1.1985\n0.055\n21.716\n0.000\n1.090\n1.307\n\n\nC(focal)[T.11001001401]\n0.6707\n0.059\n11.441\n0.000\n0.556\n0.786\n\n\nC(focal)[T.11001001402]\n0.6937\n0.059\n11.692\n0.000\n0.577\n0.810\n\n\nC(focal)[T.11001001500]\n1.1106\n0.055\n20.192\n0.000\n1.003\n1.218\n\n\nC(focal)[T.11001001600]\n0.9158\n0.056\n16.237\n0.000\n0.805\n1.026\n\n\nC(focal)[T.11001001702]\n0.8644\n0.057\n15.211\n0.000\n0.753\n0.976\n\n\nC(focal)[T.11001001803]\n1.1341\n0.056\n20.369\n0.000\n1.025\n1.243\n\n\nC(focal)[T.11001001804]\n1.2583\n0.054\n23.278\n0.000\n1.152\n1.364\n\n\nC(focal)[T.11001001901]\n1.0475\n0.055\n18.896\n0.000\n0.939\n1.156\n\n\nC(focal)[T.11001001902]\n0.3705\n0.063\n5.893\n0.000\n0.247\n0.494\n\n\nC(focal)[T.11001002001]\n0.6956\n0.058\n11.923\n0.000\n0.581\n0.810\n\n\nC(focal)[T.11001002002]\n1.0475\n0.055\n18.896\n0.000\n0.939\n1.156\n\n\nC(focal)[T.11001002101]\n1.4251\n0.053\n26.820\n0.000\n1.321\n1.529\n\n\nC(focal)[T.11001002102]\n1.2410\n0.054\n22.911\n0.000\n1.135\n1.347\n\n\nC(focal)[T.11001002201]\n1.1544\n0.056\n20.793\n0.000\n1.046\n1.263\n\n\nC(focal)[T.11001002202]\n0.7922\n0.057\n13.789\n0.000\n0.680\n0.905\n\n\nC(focal)[T.11001002301]\n0.8738\n0.057\n15.397\n0.000\n0.763\n0.985\n\n\nC(focal)[T.11001002302]\n-0.3924\n0.075\n-5.236\n0.000\n-0.539\n-0.245\n\n\nC(focal)[T.11001002400]\n1.3090\n0.054\n24.059\n0.000\n1.202\n1.416\n\n\nC(focal)[T.11001002501]\n0.8487\n0.058\n14.652\n0.000\n0.735\n0.962\n\n\nC(focal)[T.11001002503]\n0.8579\n0.057\n15.079\n0.000\n0.746\n0.969\n\n\nC(focal)[T.11001002504]\n1.0793\n0.055\n19.543\n0.000\n0.971\n1.188\n\n\nC(focal)[T.11001002600]\n0.6054\n0.060\n10.080\n0.000\n0.488\n0.723\n\n\nC(focal)[T.11001002702]\n1.4760\n0.053\n27.695\n0.000\n1.372\n1.580\n\n\nC(focal)[T.11001002703]\n0.6552\n0.059\n11.148\n0.000\n0.540\n0.770\n\n\nC(focal)[T.11001002704]\n0.8156\n0.057\n14.225\n0.000\n0.703\n0.928\n\n\nC(focal)[T.11001002801]\n1.2221\n0.055\n22.358\n0.000\n1.115\n1.329\n\n\nC(focal)[T.11001002802]\n1.2721\n0.054\n23.452\n0.000\n1.166\n1.378\n\n\nC(focal)[T.11001002900]\n1.2731\n0.054\n23.569\n0.000\n1.167\n1.379\n\n\nC(focal)[T.11001003000]\n1.1258\n0.056\n20.197\n0.000\n1.017\n1.235\n\n\nC(focal)[T.11001003100]\n1.2737\n0.055\n23.328\n0.000\n1.167\n1.381\n\n\nC(focal)[T.11001003200]\n1.4579\n0.054\n27.154\n0.000\n1.353\n1.563\n\n\nC(focal)[T.11001003301]\n1.0648\n0.055\n19.224\n0.000\n0.956\n1.173\n\n\nC(focal)[T.11001003302]\n0.8032\n0.059\n13.683\n0.000\n0.688\n0.918\n\n\nC(focal)[T.11001003400]\n0.6545\n0.059\n11.116\n0.000\n0.539\n0.770\n\n\nC(focal)[T.11001003500]\n1.1974\n0.055\n21.710\n0.000\n1.089\n1.306\n\n\nC(focal)[T.11001003600]\n1.3979\n0.054\n25.957\n0.000\n1.292\n1.503\n\n\nC(focal)[T.11001003701]\n0.9682\n0.056\n17.253\n0.000\n0.858\n1.078\n\n\nC(focal)[T.11001003702]\n0.8513\n0.057\n14.956\n0.000\n0.740\n0.963\n\n\nC(focal)[T.11001003801]\n0.5205\n0.060\n8.656\n0.000\n0.403\n0.638\n\n\nC(focal)[T.11001003802]\n1.2175\n0.054\n22.427\n0.000\n1.111\n1.324\n\n\nC(focal)[T.11001003901]\n0.8447\n0.057\n14.801\n0.000\n0.733\n0.957\n\n\nC(focal)[T.11001003902]\n0.6489\n0.060\n10.858\n0.000\n0.532\n0.766\n\n\nC(focal)[T.11001004001]\n1.1543\n0.055\n21.097\n0.000\n1.047\n1.261\n\n\nC(focal)[T.11001004002]\n1.0734\n0.056\n19.205\n0.000\n0.964\n1.183\n\n\nC(focal)[T.11001004100]\n0.5691\n0.060\n9.537\n0.000\n0.452\n0.686\n\n\nC(focal)[T.11001004201]\n1.1440\n0.055\n20.864\n0.000\n1.037\n1.251\n\n\nC(focal)[T.11001004202]\n0.7754\n0.058\n13.420\n0.000\n0.662\n0.889\n\n\nC(focal)[T.11001004300]\n1.4121\n0.054\n26.294\n0.000\n1.307\n1.517\n\n\nC(focal)[T.11001004401]\n1.1987\n0.055\n21.983\n0.000\n1.092\n1.306\n\n\nC(focal)[T.11001004402]\n0.8819\n0.057\n15.378\n0.000\n0.770\n0.994\n\n\nC(focal)[T.11001004600]\n1.1067\n0.055\n19.963\n0.000\n0.998\n1.215\n\n\nC(focal)[T.11001004702]\n1.2392\n0.055\n22.697\n0.000\n1.132\n1.346\n\n\nC(focal)[T.11001004703]\n0.9163\n0.057\n16.176\n0.000\n0.805\n1.027\n\n\nC(focal)[T.11001004704]\n0.0946\n0.066\n1.434\n0.152\n-0.035\n0.224\n\n\nC(focal)[T.11001004801]\n0.8914\n0.057\n15.731\n0.000\n0.780\n1.002\n\n\nC(focal)[T.11001004802]\n1.0515\n0.055\n18.947\n0.000\n0.943\n1.160\n\n\nC(focal)[T.11001004901]\n0.9591\n0.056\n17.084\n0.000\n0.849\n1.069\n\n\nC(focal)[T.11001004902]\n1.0929\n0.055\n19.828\n0.000\n0.985\n1.201\n\n\nC(focal)[T.11001005001]\n0.5791\n0.060\n9.610\n0.000\n0.461\n0.697\n\n\nC(focal)[T.11001005003]\n0.5234\n0.061\n8.620\n0.000\n0.404\n0.642\n\n\nC(focal)[T.11001005004]\n1.1142\n0.055\n20.135\n0.000\n1.006\n1.223\n\n\nC(focal)[T.11001005202]\n1.0857\n0.055\n19.582\n0.000\n0.977\n1.194\n\n\nC(focal)[T.11001005203]\n0.9580\n0.056\n17.014\n0.000\n0.848\n1.068\n\n\nC(focal)[T.11001005302]\n0.6749\n0.059\n11.516\n0.000\n0.560\n0.790\n\n\nC(focal)[T.11001005303]\n0.8879\n0.057\n15.587\n0.000\n0.776\n1.000\n\n\nC(focal)[T.11001005501]\n0.2993\n0.064\n4.710\n0.000\n0.175\n0.424\n\n\nC(focal)[T.11001005502]\n0.7336\n0.059\n12.536\n0.000\n0.619\n0.848\n\n\nC(focal)[T.11001005503]\n0.3170\n0.063\n5.016\n0.000\n0.193\n0.441\n\n\nC(focal)[T.11001005601]\n0.1947\n0.065\n3.017\n0.003\n0.068\n0.321\n\n\nC(focal)[T.11001005602]\n0.2021\n0.065\n3.112\n0.002\n0.075\n0.329\n\n\nC(focal)[T.11001005801]\n0.1786\n0.065\n2.742\n0.006\n0.051\n0.306\n\n\nC(focal)[T.11001005802]\n0.0541\n0.067\n0.808\n0.419\n-0.077\n0.185\n\n\nC(focal)[T.11001005900]\n0.5099\n0.061\n8.415\n0.000\n0.391\n0.629\n\n\nC(focal)[T.11001006400]\n0.9000\n0.057\n15.840\n0.000\n0.789\n1.011\n\n\nC(focal)[T.11001006500]\n0.5257\n0.061\n8.667\n0.000\n0.407\n0.645\n\n\nC(focal)[T.11001006600]\n0.4370\n0.062\n7.071\n0.000\n0.316\n0.558\n\n\nC(focal)[T.11001006700]\n1.0453\n0.056\n18.740\n0.000\n0.936\n1.155\n\n\nC(focal)[T.11001006801]\n0.6022\n0.060\n10.119\n0.000\n0.486\n0.719\n\n\nC(focal)[T.11001006802]\n0.6953\n0.059\n11.855\n0.000\n0.580\n0.810\n\n\nC(focal)[T.11001006804]\n-1.8180\n0.130\n-14.035\n0.000\n-2.072\n-1.564\n\n\nC(focal)[T.11001006900]\n1.0491\n0.056\n18.875\n0.000\n0.940\n1.158\n\n\nC(focal)[T.11001007000]\n0.5350\n0.061\n8.820\n0.000\n0.416\n0.654\n\n\nC(focal)[T.11001007100]\n0.8925\n0.057\n15.662\n0.000\n0.781\n1.004\n\n\nC(focal)[T.11001007201]\n1.2608\n0.054\n23.239\n0.000\n1.154\n1.367\n\n\nC(focal)[T.11001007202]\n1.6212\n0.052\n30.962\n0.000\n1.519\n1.724\n\n\nC(focal)[T.11001007203]\n1.0936\n0.056\n19.687\n0.000\n0.985\n1.203\n\n\nC(focal)[T.11001007301]\n-1.2406\n0.103\n-11.997\n0.000\n-1.443\n-1.038\n\n\nC(focal)[T.11001007304]\n0.8903\n0.057\n15.628\n0.000\n0.779\n1.002\n\n\nC(focal)[T.11001007401]\n-0.4398\n0.077\n-5.728\n0.000\n-0.590\n-0.289\n\n\nC(focal)[T.11001007403]\n0.5045\n0.061\n8.246\n0.000\n0.385\n0.624\n\n\nC(focal)[T.11001007404]\n0.8896\n0.057\n15.594\n0.000\n0.778\n1.001\n\n\nC(focal)[T.11001007406]\n0.6654\n0.059\n11.302\n0.000\n0.550\n0.781\n\n\nC(focal)[T.11001007407]\n1.0517\n0.056\n18.750\n0.000\n0.942\n1.162\n\n\nC(focal)[T.11001007408]\n0.3867\n0.063\n6.150\n0.000\n0.263\n0.510\n\n\nC(focal)[T.11001007409]\n0.8578\n0.058\n14.819\n0.000\n0.744\n0.971\n\n\nC(focal)[T.11001007502]\n0.9756\n0.057\n17.151\n0.000\n0.864\n1.087\n\n\nC(focal)[T.11001007503]\n0.5323\n0.061\n8.717\n0.000\n0.413\n0.652\n\n\nC(focal)[T.11001007504]\n0.3500\n0.062\n5.605\n0.000\n0.228\n0.472\n\n\nC(focal)[T.11001007601]\n0.9888\n0.056\n17.642\n0.000\n0.879\n1.099\n\n\nC(focal)[T.11001007603]\n0.9667\n0.056\n17.226\n0.000\n0.857\n1.077\n\n\nC(focal)[T.11001007604]\n0.8827\n0.057\n15.536\n0.000\n0.771\n0.994\n\n\nC(focal)[T.11001007605]\n0.8818\n0.057\n15.491\n0.000\n0.770\n0.993\n\n\nC(focal)[T.11001007703]\n1.1151\n0.055\n20.270\n0.000\n1.007\n1.223\n\n\nC(focal)[T.11001007707]\n0.8330\n0.057\n14.583\n0.000\n0.721\n0.945\n\n\nC(focal)[T.11001007708]\n0.4617\n0.061\n7.587\n0.000\n0.342\n0.581\n\n\nC(focal)[T.11001007709]\n0.3161\n0.063\n5.042\n0.000\n0.193\n0.439\n\n\nC(focal)[T.11001007803]\n1.0339\n0.056\n18.544\n0.000\n0.925\n1.143\n\n\nC(focal)[T.11001007804]\n0.7128\n0.058\n12.229\n0.000\n0.599\n0.827\n\n\nC(focal)[T.11001007806]\n0.5107\n0.060\n8.456\n0.000\n0.392\n0.629\n\n\nC(focal)[T.11001007807]\n0.3257\n0.063\n5.201\n0.000\n0.203\n0.448\n\n\nC(focal)[T.11001007808]\n0.8371\n0.057\n14.606\n0.000\n0.725\n0.949\n\n\nC(focal)[T.11001007809]\n0.7311\n0.058\n12.578\n0.000\n0.617\n0.845\n\n\nC(focal)[T.11001007901]\n1.0744\n0.055\n19.403\n0.000\n0.966\n1.183\n\n\nC(focal)[T.11001007903]\n0.3595\n0.062\n5.773\n0.000\n0.237\n0.482\n\n\nC(focal)[T.11001008001]\n0.9031\n0.057\n15.921\n0.000\n0.792\n1.014\n\n\nC(focal)[T.11001008002]\n0.8694\n0.057\n15.267\n0.000\n0.758\n0.981\n\n\nC(focal)[T.11001008100]\n0.7976\n0.058\n13.860\n0.000\n0.685\n0.910\n\n\nC(focal)[T.11001008200]\n0.5164\n0.060\n8.537\n0.000\n0.398\n0.635\n\n\nC(focal)[T.11001008301]\n0.8303\n0.057\n14.480\n0.000\n0.718\n0.943\n\n\nC(focal)[T.11001008302]\n0.8300\n0.057\n14.469\n0.000\n0.718\n0.942\n\n\nC(focal)[T.11001008402]\n0.8459\n0.058\n14.681\n0.000\n0.733\n0.959\n\n\nC(focal)[T.11001008410]\n0.4639\n0.061\n7.593\n0.000\n0.344\n0.584\n\n\nC(focal)[T.11001008701]\n0.9296\n0.057\n16.444\n0.000\n0.819\n1.040\n\n\nC(focal)[T.11001008702]\n1.1888\n0.055\n21.781\n0.000\n1.082\n1.296\n\n\nC(focal)[T.11001008802]\n1.1883\n0.055\n21.758\n0.000\n1.081\n1.295\n\n\nC(focal)[T.11001008803]\n1.0467\n0.056\n18.827\n0.000\n0.938\n1.156\n\n\nC(focal)[T.11001008804]\n0.7786\n0.058\n13.477\n0.000\n0.665\n0.892\n\n\nC(focal)[T.11001008903]\n0.9334\n0.057\n16.489\n0.000\n0.822\n1.044\n\n\nC(focal)[T.11001008904]\n0.8972\n0.057\n15.792\n0.000\n0.786\n1.009\n\n\nC(focal)[T.11001009000]\n1.0452\n0.056\n18.695\n0.000\n0.936\n1.155\n\n\nC(focal)[T.11001009102]\n1.1477\n0.055\n20.803\n0.000\n1.040\n1.256\n\n\nC(focal)[T.11001009201]\n0.7220\n0.058\n12.403\n0.000\n0.608\n0.836\n\n\nC(focal)[T.11001009203]\n0.8484\n0.057\n14.778\n0.000\n0.736\n0.961\n\n\nC(focal)[T.11001009204]\n0.9190\n0.057\n16.095\n0.000\n0.807\n1.031\n\n\nC(focal)[T.11001009301]\n0.9485\n0.057\n16.692\n0.000\n0.837\n1.060\n\n\nC(focal)[T.11001009302]\n0.5880\n0.060\n9.770\n0.000\n0.470\n0.706\n\n\nC(focal)[T.11001009400]\n1.1401\n0.055\n20.642\n0.000\n1.032\n1.248\n\n\nC(focal)[T.11001009503]\n0.7951\n0.058\n13.733\n0.000\n0.682\n0.909\n\n\nC(focal)[T.11001009504]\n0.8400\n0.057\n14.639\n0.000\n0.728\n0.952\n\n\nC(focal)[T.11001009505]\n0.9424\n0.056\n16.754\n0.000\n0.832\n1.053\n\n\nC(focal)[T.11001009507]\n0.2838\n0.064\n4.430\n0.000\n0.158\n0.409\n\n\nC(focal)[T.11001009508]\n1.0990\n0.055\n19.931\n0.000\n0.991\n1.207\n\n\nC(focal)[T.11001009509]\n0.9857\n0.056\n17.503\n0.000\n0.875\n1.096\n\n\nC(focal)[T.11001009510]\n1.0060\n0.056\n17.899\n0.000\n0.896\n1.116\n\n\nC(focal)[T.11001009511]\n-2.1957\n0.151\n-14.576\n0.000\n-2.491\n-1.900\n\n\nC(focal)[T.11001009601]\n0.3426\n0.063\n5.448\n0.000\n0.219\n0.466\n\n\nC(focal)[T.11001009602]\n0.9613\n0.057\n16.982\n0.000\n0.850\n1.072\n\n\nC(focal)[T.11001009603]\n0.9446\n0.057\n16.653\n0.000\n0.833\n1.056\n\n\nC(focal)[T.11001009604]\n0.3806\n0.063\n6.069\n0.000\n0.258\n0.504\n\n\nC(focal)[T.11001009700]\n0.8008\n0.058\n13.825\n0.000\n0.687\n0.914\n\n\nC(focal)[T.11001009801]\n-0.0775\n0.069\n-1.126\n0.260\n-0.212\n0.057\n\n\nC(focal)[T.11001009802]\n0.0909\n0.067\n1.363\n0.173\n-0.040\n0.222\n\n\nC(focal)[T.11001009803]\n0.4934\n0.061\n8.147\n0.000\n0.375\n0.612\n\n\nC(focal)[T.11001009804]\n0.4534\n0.062\n7.335\n0.000\n0.332\n0.575\n\n\nC(focal)[T.11001009807]\n0.7525\n0.059\n12.848\n0.000\n0.638\n0.867\n\n\nC(focal)[T.11001009810]\n0.4673\n0.062\n7.570\n0.000\n0.346\n0.588\n\n\nC(focal)[T.11001009811]\n0.8018\n0.058\n13.862\n0.000\n0.688\n0.915\n\n\nC(focal)[T.11001009901]\n0.4492\n0.062\n7.266\n0.000\n0.328\n0.570\n\n\nC(focal)[T.11001009902]\n0.6242\n0.060\n10.366\n0.000\n0.506\n0.742\n\n\nC(focal)[T.11001009903]\n0.3430\n0.063\n5.406\n0.000\n0.219\n0.467\n\n\nC(focal)[T.11001009904]\n0.7123\n0.059\n12.032\n0.000\n0.596\n0.828\n\n\nC(focal)[T.11001009905]\n0.7255\n0.059\n12.325\n0.000\n0.610\n0.841\n\n\nC(focal)[T.11001009906]\n0.0922\n0.067\n1.375\n0.169\n-0.039\n0.224\n\n\nC(focal)[T.11001009907]\n0.4389\n0.061\n7.186\n0.000\n0.319\n0.559\n\n\nC(focal)[T.11001010100]\n0.5254\n0.060\n8.743\n0.000\n0.408\n0.643\n\n\nC(focal)[T.11001010201]\n0.7889\n0.058\n13.695\n0.000\n0.676\n0.902\n\n\nC(focal)[T.11001010202]\n0.5241\n0.060\n8.720\n0.000\n0.406\n0.642\n\n\nC(focal)[T.11001010300]\n1.0289\n0.056\n18.216\n0.000\n0.918\n1.140\n\n\nC(focal)[T.11001010400]\n0.8205\n0.058\n14.264\n0.000\n0.708\n0.933\n\n\nC(focal)[T.11001010500]\n0.9609\n0.056\n17.143\n0.000\n0.851\n1.071\n\n\nC(focal)[T.11001010601]\n0.6463\n0.059\n10.978\n0.000\n0.531\n0.762\n\n\nC(focal)[T.11001010602]\n1.6623\n0.052\n31.919\n0.000\n1.560\n1.764\n\n\nC(focal)[T.11001010603]\n0.6678\n0.059\n11.391\n0.000\n0.553\n0.783\n\n\nC(focal)[T.11001010700]\n-0.1056\n0.069\n-1.524\n0.128\n-0.241\n0.030\n\n\nC(focal)[T.11001010800]\n-0.5377\n0.078\n-6.860\n0.000\n-0.691\n-0.384\n\n\nC(focal)[T.11001010900]\n0.3984\n0.062\n6.462\n0.000\n0.278\n0.519\n\n\nC(focal)[T.11001011001]\n0.6856\n0.059\n11.707\n0.000\n0.571\n0.800\n\n\nC(focal)[T.11001011002]\n0.3459\n0.064\n5.422\n0.000\n0.221\n0.471\n\n\nC(focal)[T.11001011100]\n1.1431\n0.055\n20.863\n0.000\n1.036\n1.250\n\n\nC(focal)[T.11001980000]\n-2.6928\n0.189\n-14.268\n0.000\n-3.063\n-2.323\n\n\nC(neighbor)[T.11001000102]\n3.1405\n0.090\n34.915\n0.000\n2.964\n3.317\n\n\nC(neighbor)[T.11001000201]\n3.4788\n0.089\n38.903\n0.000\n3.304\n3.654\n\n\nC(neighbor)[T.11001000202]\n2.8825\n0.091\n31.839\n0.000\n2.705\n3.060\n\n\nC(neighbor)[T.11001000300]\n0.7810\n0.107\n7.327\n0.000\n0.572\n0.990\n\n\nC(neighbor)[T.11001000400]\n1.4019\n0.098\n14.279\n0.000\n1.209\n1.594\n\n\nC(neighbor)[T.11001000501]\n1.1098\n0.102\n10.902\n0.000\n0.910\n1.309\n\n\nC(neighbor)[T.11001000502]\n0.3030\n0.116\n2.614\n0.009\n0.076\n0.530\n\n\nC(neighbor)[T.11001000600]\n1.4758\n0.098\n15.134\n0.000\n1.285\n1.667\n\n\nC(neighbor)[T.11001000702]\n-0.8979\n0.164\n-5.466\n0.000\n-1.220\n-0.576\n\n\nC(neighbor)[T.11001000703]\n-1.4610\n0.203\n-7.208\n0.000\n-1.858\n-1.064\n\n\nC(neighbor)[T.11001000704]\n-0.6496\n0.151\n-4.314\n0.000\n-0.945\n-0.354\n\n\nC(neighbor)[T.11001000802]\n0.6826\n0.108\n6.330\n0.000\n0.471\n0.894\n\n\nC(neighbor)[T.11001000803]\n0.6293\n0.109\n5.755\n0.000\n0.415\n0.844\n\n\nC(neighbor)[T.11001000804]\n1.0482\n0.103\n10.211\n0.000\n0.847\n1.249\n\n\nC(neighbor)[T.11001000902]\n0.2614\n0.118\n2.218\n0.027\n0.030\n0.492\n\n\nC(neighbor)[T.11001000903]\n2.2264\n0.093\n24.028\n0.000\n2.045\n2.408\n\n\nC(neighbor)[T.11001000904]\n1.7597\n0.095\n18.479\n0.000\n1.573\n1.946\n\n\nC(neighbor)[T.11001001002]\n2.1698\n0.093\n23.360\n0.000\n1.988\n2.352\n\n\nC(neighbor)[T.11001001003]\n-0.0969\n0.127\n-0.762\n0.446\n-0.346\n0.152\n\n\nC(neighbor)[T.11001001004]\n1.8162\n0.095\n19.099\n0.000\n1.630\n2.003\n\n\nC(neighbor)[T.11001001100]\n2.5451\n0.091\n27.853\n0.000\n2.366\n2.724\n\n\nC(neighbor)[T.11001001200]\n1.6972\n0.096\n17.666\n0.000\n1.509\n1.886\n\n\nC(neighbor)[T.11001001301]\n-0.1614\n0.131\n-1.231\n0.218\n-0.418\n0.096\n\n\nC(neighbor)[T.11001001303]\n1.3080\n0.100\n13.117\n0.000\n1.113\n1.503\n\n\nC(neighbor)[T.11001001304]\n0.7163\n0.109\n6.591\n0.000\n0.503\n0.929\n\n\nC(neighbor)[T.11001001401]\n0.2863\n0.116\n2.467\n0.014\n0.059\n0.514\n\n\nC(neighbor)[T.11001001402]\n1.1226\n0.102\n11.003\n0.000\n0.923\n1.323\n\n\nC(neighbor)[T.11001001500]\n0.6738\n0.108\n6.248\n0.000\n0.462\n0.885\n\n\nC(neighbor)[T.11001001600]\n1.9502\n0.094\n20.746\n0.000\n1.766\n2.134\n\n\nC(neighbor)[T.11001001702]\n1.3230\n0.099\n13.377\n0.000\n1.129\n1.517\n\n\nC(neighbor)[T.11001001803]\n-1.1571\n0.185\n-6.268\n0.000\n-1.519\n-0.795\n\n\nC(neighbor)[T.11001001804]\n-0.0656\n0.126\n-0.521\n0.603\n-0.313\n0.181\n\n\nC(neighbor)[T.11001001901]\n1.8236\n0.095\n19.245\n0.000\n1.638\n2.009\n\n\nC(neighbor)[T.11001001902]\n0.3818\n0.115\n3.321\n0.001\n0.156\n0.607\n\n\nC(neighbor)[T.11001002001]\n0.3686\n0.114\n3.231\n0.001\n0.145\n0.592\n\n\nC(neighbor)[T.11001002002]\n0.2859\n0.116\n2.463\n0.014\n0.058\n0.513\n\n\nC(neighbor)[T.11001002101]\n1.0279\n0.102\n10.042\n0.000\n0.827\n1.229\n\n\nC(neighbor)[T.11001002102]\n0.4883\n0.111\n4.381\n0.000\n0.270\n0.707\n\n\nC(neighbor)[T.11001002201]\n-0.1378\n0.131\n-1.051\n0.293\n-0.395\n0.119\n\n\nC(neighbor)[T.11001002202]\n-1.3496\n0.193\n-7.001\n0.000\n-1.727\n-0.972\n\n\nC(neighbor)[T.11001002301]\n-0.1764\n0.130\n-1.359\n0.174\n-0.431\n0.078\n\n\nC(neighbor)[T.11001002302]\n3.5488\n0.089\n39.746\n0.000\n3.374\n3.724\n\n\nC(neighbor)[T.11001002400]\n0.8305\n0.106\n7.811\n0.000\n0.622\n1.039\n\n\nC(neighbor)[T.11001002501]\n0.7612\n0.108\n7.080\n0.000\n0.550\n0.972\n\n\nC(neighbor)[T.11001002503]\n0.9627\n0.103\n9.320\n0.000\n0.760\n1.165\n\n\nC(neighbor)[T.11001002504]\n-0.3626\n0.137\n-2.649\n0.008\n-0.631\n-0.094\n\n\nC(neighbor)[T.11001002600]\n-0.4612\n0.143\n-3.228\n0.001\n-0.741\n-0.181\n\n\nC(neighbor)[T.11001002702]\n0.7165\n0.108\n6.644\n0.000\n0.505\n0.928\n\n\nC(neighbor)[T.11001002703]\n0.2396\n0.117\n2.041\n0.041\n0.010\n0.470\n\n\nC(neighbor)[T.11001002704]\n-0.3413\n0.136\n-2.501\n0.012\n-0.609\n-0.074\n\n\nC(neighbor)[T.11001002801]\n0.0454\n0.124\n0.367\n0.713\n-0.197\n0.288\n\n\nC(neighbor)[T.11001002802]\n1.7848\n0.095\n18.750\n0.000\n1.598\n1.971\n\n\nC(neighbor)[T.11001002900]\n1.1559\n0.101\n11.460\n0.000\n0.958\n1.354\n\n\nC(neighbor)[T.11001003000]\n0.1764\n0.121\n1.460\n0.144\n-0.060\n0.413\n\n\nC(neighbor)[T.11001003100]\n0.9256\n0.105\n8.845\n0.000\n0.721\n1.131\n\n\nC(neighbor)[T.11001003200]\n0.6225\n0.110\n5.649\n0.000\n0.407\n0.838\n\n\nC(neighbor)[T.11001003301]\n-0.1882\n0.131\n-1.440\n0.150\n-0.445\n0.068\n\n\nC(neighbor)[T.11001003302]\n0.1624\n0.122\n1.334\n0.182\n-0.076\n0.401\n\n\nC(neighbor)[T.11001003400]\n2.3611\n0.092\n25.633\n0.000\n2.181\n2.542\n\n\nC(neighbor)[T.11001003500]\n1.6498\n0.096\n17.102\n0.000\n1.461\n1.839\n\n\nC(neighbor)[T.11001003600]\n0.8822\n0.105\n8.383\n0.000\n0.676\n1.089\n\n\nC(neighbor)[T.11001003701]\n0.2202\n0.118\n1.861\n0.063\n-0.012\n0.452\n\n\nC(neighbor)[T.11001003702]\n-0.5168\n0.143\n-3.603\n0.000\n-0.798\n-0.236\n\n\nC(neighbor)[T.11001003801]\n1.4469\n0.098\n14.803\n0.000\n1.255\n1.638\n\n\nC(neighbor)[T.11001003802]\n1.4812\n0.097\n15.204\n0.000\n1.290\n1.672\n\n\nC(neighbor)[T.11001003901]\n0.7810\n0.107\n7.326\n0.000\n0.572\n0.990\n\n\nC(neighbor)[T.11001003902]\n0.0168\n0.125\n0.134\n0.893\n-0.228\n0.262\n\n\nC(neighbor)[T.11001004001]\n0.6790\n0.108\n6.285\n0.000\n0.467\n0.891\n\n\nC(neighbor)[T.11001004002]\n2.0825\n0.094\n22.268\n0.000\n1.899\n2.266\n\n\nC(neighbor)[T.11001004100]\n0.6405\n0.109\n5.892\n0.000\n0.427\n0.854\n\n\nC(neighbor)[T.11001004201]\n1.6201\n0.096\n16.814\n0.000\n1.431\n1.809\n\n\nC(neighbor)[T.11001004202]\n2.0009\n0.094\n21.324\n0.000\n1.817\n2.185\n\n\nC(neighbor)[T.11001004300]\n1.7532\n0.096\n18.346\n0.000\n1.566\n1.941\n\n\nC(neighbor)[T.11001004401]\n1.9006\n0.094\n20.125\n0.000\n1.716\n2.086\n\n\nC(neighbor)[T.11001004402]\n1.6462\n0.096\n17.089\n0.000\n1.457\n1.835\n\n\nC(neighbor)[T.11001004600]\n1.8362\n0.095\n19.355\n0.000\n1.650\n2.022\n\n\nC(neighbor)[T.11001004702]\n2.7948\n0.091\n30.801\n0.000\n2.617\n2.973\n\n\nC(neighbor)[T.11001004703]\n1.2719\n0.100\n12.750\n0.000\n1.076\n1.467\n\n\nC(neighbor)[T.11001004704]\n0.6322\n0.109\n5.799\n0.000\n0.419\n0.846\n\n\nC(neighbor)[T.11001004801]\n2.3305\n0.092\n25.267\n0.000\n2.150\n2.511\n\n\nC(neighbor)[T.11001004802]\n1.8739\n0.095\n19.803\n0.000\n1.688\n2.059\n\n\nC(neighbor)[T.11001004901]\n1.3118\n0.099\n13.210\n0.000\n1.117\n1.506\n\n\nC(neighbor)[T.11001004902]\n2.1670\n0.093\n23.310\n0.000\n1.985\n2.349\n\n\nC(neighbor)[T.11001005001]\n1.2092\n0.100\n12.032\n0.000\n1.012\n1.406\n\n\nC(neighbor)[T.11001005003]\n1.2452\n0.100\n12.456\n0.000\n1.049\n1.441\n\n\nC(neighbor)[T.11001005004]\n-0.0184\n0.125\n-0.147\n0.883\n-0.264\n0.227\n\n\nC(neighbor)[T.11001005202]\n1.8018\n0.095\n18.964\n0.000\n1.616\n1.988\n\n\nC(neighbor)[T.11001005203]\n1.4601\n0.098\n14.953\n0.000\n1.269\n1.651\n\n\nC(neighbor)[T.11001005302]\n1.1030\n0.102\n10.850\n0.000\n0.904\n1.302\n\n\nC(neighbor)[T.11001005303]\n2.3299\n0.092\n25.266\n0.000\n2.149\n2.511\n\n\nC(neighbor)[T.11001005501]\n3.7241\n0.089\n41.739\n0.000\n3.549\n3.899\n\n\nC(neighbor)[T.11001005502]\n2.6177\n0.091\n28.621\n0.000\n2.438\n2.797\n\n\nC(neighbor)[T.11001005503]\n2.4439\n0.092\n26.625\n0.000\n2.264\n2.624\n\n\nC(neighbor)[T.11001005601]\n1.2134\n0.101\n12.067\n0.000\n1.016\n1.410\n\n\nC(neighbor)[T.11001005602]\n2.1262\n0.093\n22.745\n0.000\n1.943\n2.309\n\n\nC(neighbor)[T.11001005801]\n3.7204\n0.089\n41.713\n0.000\n3.546\n3.895\n\n\nC(neighbor)[T.11001005802]\n5.0489\n0.088\n57.142\n0.000\n4.876\n5.222\n\n\nC(neighbor)[T.11001005900]\n3.5709\n0.089\n39.970\n0.000\n3.396\n3.746\n\n\nC(neighbor)[T.11001006400]\n0.6140\n0.109\n5.624\n0.000\n0.400\n0.828\n\n\nC(neighbor)[T.11001006500]\n2.2768\n0.093\n24.556\n0.000\n2.095\n2.459\n\n\nC(neighbor)[T.11001006600]\n1.7989\n0.096\n18.830\n0.000\n1.612\n1.986\n\n\nC(neighbor)[T.11001006700]\n1.5624\n0.097\n16.064\n0.000\n1.372\n1.753\n\n\nC(neighbor)[T.11001006801]\n-0.6434\n0.151\n-4.251\n0.000\n-0.940\n-0.347\n\n\nC(neighbor)[T.11001006802]\n0.1988\n0.120\n1.661\n0.097\n-0.036\n0.433\n\n\nC(neighbor)[T.11001006804]\n0.4993\n0.112\n4.464\n0.000\n0.280\n0.719\n\n\nC(neighbor)[T.11001006900]\n1.2565\n0.100\n12.562\n0.000\n1.060\n1.453\n\n\nC(neighbor)[T.11001007000]\n1.9436\n0.094\n20.568\n0.000\n1.758\n2.129\n\n\nC(neighbor)[T.11001007100]\n1.1957\n0.101\n11.843\n0.000\n0.998\n1.394\n\n\nC(neighbor)[T.11001007201]\n2.2527\n0.093\n24.344\n0.000\n2.071\n2.434\n\n\nC(neighbor)[T.11001007202]\n1.7101\n0.096\n17.830\n0.000\n1.522\n1.898\n\n\nC(neighbor)[T.11001007203]\n2.4754\n0.092\n26.958\n0.000\n2.295\n2.655\n\n\nC(neighbor)[T.11001007301]\n0.4872\n0.113\n4.305\n0.000\n0.265\n0.709\n\n\nC(neighbor)[T.11001007304]\n0.7154\n0.108\n6.634\n0.000\n0.504\n0.927\n\n\nC(neighbor)[T.11001007401]\n0.1873\n0.120\n1.564\n0.118\n-0.047\n0.422\n\n\nC(neighbor)[T.11001007403]\n-0.7936\n0.160\n-4.959\n0.000\n-1.107\n-0.480\n\n\nC(neighbor)[T.11001007404]\n-1.4870\n0.206\n-7.235\n0.000\n-1.890\n-1.084\n\n\nC(neighbor)[T.11001007406]\n-0.3352\n0.136\n-2.464\n0.014\n-0.602\n-0.069\n\n\nC(neighbor)[T.11001007407]\n-0.6157\n0.151\n-4.068\n0.000\n-0.912\n-0.319\n\n\nC(neighbor)[T.11001007408]\n-0.1540\n0.131\n-1.172\n0.241\n-0.412\n0.104\n\n\nC(neighbor)[T.11001007409]\n-0.3844\n0.141\n-2.721\n0.007\n-0.661\n-0.108\n\n\nC(neighbor)[T.11001007502]\n0.1825\n0.121\n1.505\n0.132\n-0.055\n0.420\n\n\nC(neighbor)[T.11001007503]\n1.3558\n0.099\n13.652\n0.000\n1.161\n1.550\n\n\nC(neighbor)[T.11001007504]\n-0.2861\n0.134\n-2.129\n0.033\n-0.549\n-0.023\n\n\nC(neighbor)[T.11001007601]\n0.4427\n0.113\n3.921\n0.000\n0.221\n0.664\n\n\nC(neighbor)[T.11001007603]\n0.2163\n0.118\n1.831\n0.067\n-0.015\n0.448\n\n\nC(neighbor)[T.11001007604]\n-0.6115\n0.148\n-4.119\n0.000\n-0.902\n-0.321\n\n\nC(neighbor)[T.11001007605]\n-0.3129\n0.135\n-2.314\n0.021\n-0.578\n-0.048\n\n\nC(neighbor)[T.11001007703]\n-0.3559\n0.137\n-2.600\n0.009\n-0.624\n-0.088\n\n\nC(neighbor)[T.11001007707]\n-1.3134\n0.191\n-6.891\n0.000\n-1.687\n-0.940\n\n\nC(neighbor)[T.11001007708]\n-1.4064\n0.197\n-7.122\n0.000\n-1.794\n-1.019\n\n\nC(neighbor)[T.11001007709]\n-1.0417\n0.172\n-6.066\n0.000\n-1.378\n-0.705\n\n\nC(neighbor)[T.11001007803]\n1.4259\n0.098\n14.548\n0.000\n1.234\n1.618\n\n\nC(neighbor)[T.11001007804]\n0.4094\n0.113\n3.611\n0.000\n0.187\n0.632\n\n\nC(neighbor)[T.11001007806]\n-0.3589\n0.137\n-2.621\n0.009\n-0.627\n-0.091\n\n\nC(neighbor)[T.11001007807]\n-1.7866\n0.231\n-7.745\n0.000\n-2.239\n-1.335\n\n\nC(neighbor)[T.11001007808]\n-0.0722\n0.127\n-0.570\n0.568\n-0.320\n0.176\n\n\nC(neighbor)[T.11001007809]\n-0.1307\n0.128\n-1.019\n0.308\n-0.382\n0.121\n\n\nC(neighbor)[T.11001007901]\n0.5532\n0.110\n5.017\n0.000\n0.337\n0.769\n\n\nC(neighbor)[T.11001007903]\n-0.7730\n0.156\n-4.947\n0.000\n-1.079\n-0.467\n\n\nC(neighbor)[T.11001008001]\n0.7019\n0.107\n6.530\n0.000\n0.491\n0.913\n\n\nC(neighbor)[T.11001008002]\n0.6677\n0.108\n6.179\n0.000\n0.456\n0.879\n\n\nC(neighbor)[T.11001008100]\n0.1855\n0.119\n1.561\n0.118\n-0.047\n0.418\n\n\nC(neighbor)[T.11001008200]\n1.3867\n0.098\n14.093\n0.000\n1.194\n1.580\n\n\nC(neighbor)[T.11001008301]\n1.3838\n0.098\n14.055\n0.000\n1.191\n1.577\n\n\nC(neighbor)[T.11001008302]\n1.2911\n0.099\n12.984\n0.000\n1.096\n1.486\n\n\nC(neighbor)[T.11001008402]\n0.8861\n0.105\n8.432\n0.000\n0.680\n1.092\n\n\nC(neighbor)[T.11001008410]\n0.6217\n0.109\n5.703\n0.000\n0.408\n0.835\n\n\nC(neighbor)[T.11001008701]\n0.7908\n0.106\n7.460\n0.000\n0.583\n0.999\n\n\nC(neighbor)[T.11001008702]\n0.7120\n0.107\n6.640\n0.000\n0.502\n0.922\n\n\nC(neighbor)[T.11001008802]\n0.4785\n0.112\n4.281\n0.000\n0.259\n0.698\n\n\nC(neighbor)[T.11001008803]\n2.4652\n0.092\n26.893\n0.000\n2.286\n2.645\n\n\nC(neighbor)[T.11001008804]\n1.0365\n0.102\n10.130\n0.000\n0.836\n1.237\n\n\nC(neighbor)[T.11001008903]\n-0.5685\n0.146\n-3.882\n0.000\n-0.856\n-0.281\n\n\nC(neighbor)[T.11001008904]\n0.6911\n0.108\n6.413\n0.000\n0.480\n0.902\n\n\nC(neighbor)[T.11001009000]\n1.3200\n0.099\n13.295\n0.000\n1.125\n1.515\n\n\nC(neighbor)[T.11001009102]\n2.4634\n0.092\n26.843\n0.000\n2.283\n2.643\n\n\nC(neighbor)[T.11001009201]\n1.5008\n0.097\n15.439\n0.000\n1.310\n1.691\n\n\nC(neighbor)[T.11001009203]\n-0.8475\n0.161\n-5.262\n0.000\n-1.163\n-0.532\n\n\nC(neighbor)[T.11001009204]\n1.2979\n0.100\n13.026\n0.000\n1.103\n1.493\n\n\nC(neighbor)[T.11001009301]\n1.2169\n0.101\n12.105\n0.000\n1.020\n1.414\n\n\nC(neighbor)[T.11001009302]\n0.9005\n0.105\n8.602\n0.000\n0.695\n1.106\n\n\nC(neighbor)[T.11001009400]\n1.2103\n0.100\n12.046\n0.000\n1.013\n1.407\n\n\nC(neighbor)[T.11001009503]\n-0.5120\n0.144\n-3.555\n0.000\n-0.794\n-0.230\n\n\nC(neighbor)[T.11001009504]\n1.9549\n0.094\n20.785\n0.000\n1.771\n2.139\n\n\nC(neighbor)[T.11001009505]\n1.5556\n0.097\n16.081\n0.000\n1.366\n1.745\n\n\nC(neighbor)[T.11001009507]\n-2.3383\n0.302\n-7.748\n0.000\n-2.930\n-1.747\n\n\nC(neighbor)[T.11001009508]\n0.0917\n0.121\n0.757\n0.449\n-0.146\n0.329\n\n\nC(neighbor)[T.11001009509]\n-0.0641\n0.127\n-0.503\n0.615\n-0.314\n0.186\n\n\nC(neighbor)[T.11001009510]\n0.1233\n0.122\n1.012\n0.312\n-0.116\n0.362\n\n\nC(neighbor)[T.11001009511]\n-1.6194\n0.215\n-7.533\n0.000\n-2.041\n-1.198\n\n\nC(neighbor)[T.11001009601]\n-0.2430\n0.134\n-1.819\n0.069\n-0.505\n0.019\n\n\nC(neighbor)[T.11001009602]\n0.1581\n0.122\n1.295\n0.195\n-0.081\n0.397\n\n\nC(neighbor)[T.11001009603]\n1.2977\n0.100\n12.946\n0.000\n1.101\n1.494\n\n\nC(neighbor)[T.11001009604]\n0.1192\n0.123\n0.966\n0.334\n-0.123\n0.361\n\n\nC(neighbor)[T.11001009700]\n-0.3702\n0.141\n-2.630\n0.009\n-0.646\n-0.094\n\n\nC(neighbor)[T.11001009801]\n-1.3208\n0.191\n-6.930\n0.000\n-1.694\n-0.947\n\n\nC(neighbor)[T.11001009802]\n-2.0229\n0.265\n-7.632\n0.000\n-2.542\n-1.503\n\n\nC(neighbor)[T.11001009803]\n-1.0910\n0.175\n-6.249\n0.000\n-1.433\n-0.749\n\n\nC(neighbor)[T.11001009804]\n-0.1910\n0.134\n-1.425\n0.154\n-0.454\n0.072\n\n\nC(neighbor)[T.11001009807]\n0.3633\n0.117\n3.110\n0.002\n0.134\n0.592\n\n\nC(neighbor)[T.11001009810]\n-1.9377\n0.258\n-7.509\n0.000\n-2.444\n-1.432\n\n\nC(neighbor)[T.11001009811]\n0.5103\n0.112\n4.548\n0.000\n0.290\n0.730\n\n\nC(neighbor)[T.11001009901]\n0.6655\n0.109\n6.085\n0.000\n0.451\n0.880\n\n\nC(neighbor)[T.11001009902]\n-1.7437\n0.235\n-7.409\n0.000\n-2.205\n-1.282\n\n\nC(neighbor)[T.11001009903]\n-0.7231\n0.157\n-4.600\n0.000\n-1.031\n-0.415\n\n\nC(neighbor)[T.11001009904]\n-0.3143\n0.138\n-2.273\n0.023\n-0.585\n-0.043\n\n\nC(neighbor)[T.11001009905]\n-1.5128\n0.212\n-7.148\n0.000\n-1.928\n-1.098\n\n\nC(neighbor)[T.11001009906]\n-1.9189\n0.252\n-7.626\n0.000\n-2.412\n-1.426\n\n\nC(neighbor)[T.11001009907]\n-0.5965\n0.147\n-4.055\n0.000\n-0.885\n-0.308\n\n\nC(neighbor)[T.11001010100]\n4.7713\n0.088\n53.962\n0.000\n4.598\n4.945\n\n\nC(neighbor)[T.11001010201]\n0.6789\n0.108\n6.296\n0.000\n0.468\n0.890\n\n\nC(neighbor)[T.11001010202]\n3.6732\n0.089\n41.199\n0.000\n3.498\n3.848\n\n\nC(neighbor)[T.11001010300]\n0.7257\n0.108\n6.711\n0.000\n0.514\n0.938\n\n\nC(neighbor)[T.11001010400]\n2.0073\n0.094\n21.338\n0.000\n1.823\n2.192\n\n\nC(neighbor)[T.11001010500]\n2.0285\n0.094\n21.659\n0.000\n1.845\n2.212\n\n\nC(neighbor)[T.11001010601]\n3.5731\n0.089\n40.033\n0.000\n3.398\n3.748\n\n\nC(neighbor)[T.11001010602]\n2.1431\n0.093\n23.045\n0.000\n1.961\n2.325\n\n\nC(neighbor)[T.11001010603]\n3.3995\n0.089\n37.991\n0.000\n3.224\n3.575\n\n\nC(neighbor)[T.11001010700]\n5.3072\n0.088\n60.130\n0.000\n5.134\n5.480\n\n\nC(neighbor)[T.11001010800]\n3.9466\n0.089\n44.401\n0.000\n3.772\n4.121\n\n\nC(neighbor)[T.11001010900]\n0.8750\n0.105\n8.352\n0.000\n0.670\n1.080\n\n\nC(neighbor)[T.11001011001]\n-1.2888\n0.188\n-6.837\n0.000\n-1.658\n-0.919\n\n\nC(neighbor)[T.11001011002]\n0.3912\n0.117\n3.342\n0.001\n0.162\n0.621\n\n\nC(neighbor)[T.11001011100]\n2.5300\n0.092\n27.645\n0.000\n2.351\n2.709\n\n\nC(neighbor)[T.11001980000]\n4.6305\n0.088\n52.335\n0.000\n4.457\n4.804\n\n\ndistance\n-1.954e-05\n9.18e-07\n-21.280\n0.000\n-2.13e-05\n-1.77e-05\n\n\n\n\n\n\nd.params[-1:]\n\narray([-1.95256086e-05])\n\n\n\nd_statsmodels.params[-1]\n\n/var/folders/j8/5bgcw6hs7cqcbbz48d6bsftw0000gp/T/ipykernel_76455/3503717071.py:1: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  d_statsmodels.params[-1]\n\n\nnp.float64(-1.953566583722616e-05)\n\n\n\n\n\n\nFotheringham, A Stewart, and Morton E O’Kelly. 1989. Spatial Interaction Models: Formulations and Applications. Dordrecht: Kluwer Academic Publishers Dordrecht.\n\n\nGetis, A. 1991. “Spatial Interaction and Spatial Autocorrelation: A Cross-Product Approach.” Environment and Planning A: Economy and Space 23 (9): 1269–77. https://doi.org/10.1068/a231269.\n\n\nGlaeser, Edward L, Eric A Hanushek, and John M Quigley. 2004. “Opportunities, Race, and Urban Location: The Influence of John Kain.” Journal of Urban Economics 56 (1): 70–79. https://doi.org/10.1016/j.jue.2004.03.002.\n\n\nGriffith, Daniel A., Yongwan Chun, and Bin Li. 2019. “Spatial Interaction Modeling.” In Spatial Regression Analysis Using Eigenvector Spatial Filtering, 141–66. Elsevier. https://doi.org/10.1016/B978-0-12-815043-6.00007-0.\n\n\nKain, John F. 1968. “Housing Segregation, Negro Employment, and Metropolitan Decentralization.” The Quarterly Journal of Economics 82 (2): 175–97. https://doi.org/10.2307/1885893.\n\n\n———. 1992. “The Spatial Mismatch Hypothesis: Three Decades Later.” Housing Policy Debate 3 (2): 393–402. https://doi.org/10.1080/10511482.1992.9521100.\n\n\nLiao, Mengyu, and Taylor M. Oshan. 2025. “A Data‐Driven Approach to Spatial Interaction Models of Migration: Integrating and Refining the Theories of Competing Destinations and Intervening Opportunities.” Geographical Analysis, March. https://doi.org/10.1111/gean.70001.\n\n\nOshan, Taylor M. 2021. “The Spatial Structure Debate in Spatial Interaction Modeling: 50 Years On.” Progress in Human Geography 45 (5): 925–50. https://doi.org/10.1177/0309132520968134.\n\n\nOshan, Taylor M. 2016. “A Primer for Working with the Spatial Interaction Modeling (SpInt) Module in the Python Spatial Analysis Library (PySAL).” REGION 3 (2, 2): R11–23. https://doi.org/10.18335/region.v3i2.175.\n\n\nOshan, Taylor M., and Mengyu Liao. 2025. “Generalized Additive Spatial Smoothing (GASS): A Multiscale Regression Framework for Modeling Neighborhood Effects Across Spatial Supports.” Annals of the American Association of Geographers 115 (1): 110–30. https://doi.org/10.1080/24694452.2024.2401490.\n\n\nPutman, S H, and S-H Chung. 1989. “Effects of Spatial System Design on Spatial Interaction Models. 1: The Spatial System Definition Problem.” Environment and Planning A: Economy and Space 21 (1): 27–46. https://doi.org/10.1068/a210027.\n\n\nRey, Sergio J., Luc Anselin, Pedro Amaral, Dani Arribas-Bel, Renan Xavier Cortes, James David Gaboardi, Wei Kang, et al. 2021. “The PySAL Ecosystem: Philosophy and Implementation.” Geographical Analysis, June, gean.12276. https://doi.org/10.1111/gean.12276.\n\n\nTobler, W. 1983. “An Alternative Formulation for Spatial-Interaction Modeling.” Environment and Planning A 15 (5): 693–703.\n\n\nWilson, A. G. 1967. “A Statistical Theory of Spatial Distribution Models.” Transportation Research 1 (3): 253–69. https://doi.org/10.1016/0041-1647(67)90035-4.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Migration Graphs and Spatial Interaction</span>"
    ]
  },
  {
    "objectID": "notebooks/03_spatial_dependence.html",
    "href": "notebooks/03_spatial_dependence.html",
    "title": "4  Spatial Interaction with Spatial Dependence",
    "section": "",
    "text": "4.1 Spatial Econometric Models\nWhat if our flows are not independent?\nLike any regression, a critical assumption in spatial interaction models is that observations are independent from one another. And like any model using spatial data, the model is misspecified if residuals are spatially autocorrelated (indicating the input data fail the independence criterion). We can use spatial econometric approaches to handle this situation, albeit with some minor modifications because\nApproaches for estimating spatial lag models are described in LeSage, Fischer, and Scherngell (2007) and LeSage and Pace (2008) while error models are described by Fischer and Griffith (2008), the latter two of which use conventional estimation techniques with specialized \\(W\\) matrices based on the notion of neighboring origins or neighboring destinations. We explore how to conduct these analyses below. For further background, consult Fischer and Griffith (2008), LeSage, Fischer, and Scherngell (2007), LeSage and Pace (2008), LeSage and Fischer (2010), LeSage and Llano (2013), LeSage (2014), Thomas-Agnan and LeSage (2014) and Ord (1975).\nIn the following example we will focus on the spatial interaction specification of two workhorse models in spatial econometrics: the “spatial lag” and “spatial error” models. Following the log-linear specification from the prior section, these are given by",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Spatial Interaction with Spatial Dependence</span>"
    ]
  },
  {
    "objectID": "notebooks/03_spatial_dependence.html#spatial-econometric-models",
    "href": "notebooks/03_spatial_dependence.html#spatial-econometric-models",
    "title": "4  Spatial Interaction with Spatial Dependence",
    "section": "",
    "text": "4.1.1 Spatial Lag\n\\[ \\log(F_{ij} +\n\\delta) =  \\log(\\kappa) + \\rho W\\log(F_{ij}+\\delta) + \\alpha \\log(O_i)  + \\beta \\log(D_j) + \\gamma d_{ij} + \\epsilon_{ij}  \\tag{4.1}\\]\n\n\n4.1.2 Spatial Error\n\\[\n\\begin{gathered}\n\\log(F_{ij} +\n\\delta) = \\log(\\kappa) +  \\alpha \\log(O_i)  + \\beta \\log(D_j) + \\gamma d_{ij} + u \\\\\nu = \\lambda Wu +\\epsilon_{ij}\n\\end{gathered}\n\\tag{4.2}\\]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Spatial Interaction with Spatial Dependence</span>"
    ]
  },
  {
    "objectID": "notebooks/03_spatial_dependence.html#data-preparation",
    "href": "notebooks/03_spatial_dependence.html#data-preparation",
    "title": "4  Spatial Interaction with Spatial Dependence",
    "section": "4.2 Data Preparation",
    "text": "4.2 Data Preparation\nWe will follow the same data processing steps as in the previous sections, collecting data for Washington D.C. and converting it into a Graph of flows, then merging with additional data from the Census.\n\ndatasets = DataStore()\n\ndc = gio.get_acs(datasets, state_fips=\"11\", years=2021, level=\"tract\")\n\ndc_flows = pd.read_csv(\n    \"https://lehd.ces.census.gov/data/lodes/LODES8/dc/od/dc_od_main_JT00_2022.csv.gz\",\n    converters={\"w_geocode\": str, \"h_geocode\": str},\n    low_memory=False,\n    encoding=\"latin1\",\n)\ndc_flows[\"w_tr_geocode\"] = dc_flows[\"w_geocode\"].str[:11]\ndc_flows[\"h_tr_geocode\"] = dc_flows[\"h_geocode\"].str[:11]\ndc_flows = dc_flows[[\"w_geocode\", \"h_geocode\", \"w_tr_geocode\", \"h_tr_geocode\", \"S000\"]]\ndc_flows = (\n    dc_flows.groupby([\"w_tr_geocode\", \"h_tr_geocode\"])[\"S000\"].sum().reset_index()\n)\n\ndc_flow_graph = Graph.from_adjacency(\n    adjacency=dc_flows,\n    focal_col=\"h_tr_geocode\",\n    neighbor_col=\"w_tr_geocode\",\n    weight_col=\"S000\",\n)\n\ndc = dc.set_index(\"geoid\")\n\n# for our dataset we want the full dense matrix\ndc_interaction = pd.Series(\n    dc_flow_graph.sparse.toarray().reshape(-1),\n    index=pd.MultiIndex.from_product(\n        [dc_flow_graph.unique_ids, dc_flow_graph.unique_ids.rename(\"neighbor\")]\n    ),\n).rename(\"weight\")\n\ndc_interaction = dc_interaction.reset_index()\n\n# first merge origin attributes\ndc_interaction = dc_interaction.merge(\n    dc.drop(columns=[\"geometry\"]), left_on=\"focal\", right_index=True, how=\"left\"\n)\n\n# now merge destination attributes\ndc_interaction = dc_interaction.merge(\n    dc.drop(columns=[\"geometry\"]),\n    left_on=\"neighbor\",\n    right_index=True,\n    how=\"left\",\n    suffixes=[\"_origin\", \"_destination\"],\n)\n\n/Users/knaaptime/Dropbox/projects/geosnap/geosnap/io/util.py:273: UserWarning: Unable to find local adjustment year for 2021. Attempting from online data\n  warn(\n/Users/knaaptime/Dropbox/projects/geosnap/geosnap/io/constructors.py:218: UserWarning: Currency columns unavailable at this resolution; not adjusting for inflation\n  warn(",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Spatial Interaction with Spatial Dependence</span>"
    ]
  },
  {
    "objectID": "notebooks/03_spatial_dependence.html#a-confluence-of-graphs",
    "href": "notebooks/03_spatial_dependence.html#a-confluence-of-graphs",
    "title": "4  Spatial Interaction with Spatial Dependence",
    "section": "4.3 A Confluence of Graphs",
    "text": "4.3 A Confluence of Graphs\nWhat’s “near” to a flow?\n\n4.3.1 Distance Graph\nkeep only tracts in the dataframe in our flow graph (origins), then get distance between observations with no decay\n\ndc = dc.to_crs(dc.estimate_utm_crs())\n\ndc = dc[dc.index.isin(dc_flow_graph.unique_ids)]\n\ndc_dist = Graph.build_distance_band(\n    dc.set_geometry(dc.centroid), threshold=1e20, binary=False, alpha=1\n)\n\n\ndc_dist.summary()\n\n\nGraph Summary Statistics\n\n\nNumber of nodes:\n206\n\n\nNumber of edges:\n42230\n\n\nNumber of connected components:\n1\n\n\nNumber of isolates:\n0\n\n\nNumber of non-zero edges:\n42230\n\n\nPercentage of non-zero edges:\n99.51%\n\n\nNumber of asymmetries:\nNA\n\n\n\n\n            \n\nSum of weights and Traces\n\n\nS0:\n264750122\nGG:\n2148736844278\n\n\nS1:\n4297473688556\nG'G:\n2148736844278\n\n\nS3:\n1435759541759836\nG'G + GG:\n4297473688556\n\n\n\n\n            \n                Graph indexed by: ['11001000101', '11001000102', '11001000201', '1100100020...]\n            \n\n\n\ndc_dist.adjacency\n\nfocal        neighbor   \n11001000101  11001000102     673.024487\n             11001000201    1714.423693\n             11001000202    1318.286816\n             11001000300    2086.439842\n             11001000400    1954.193812\n                               ...     \n11001980000  11001010800    2075.840579\n             11001010900    7660.568101\n             11001011001    1816.050530\n             11001011002    1999.546509\n             11001011100    7177.371175\nName: weight, Length: 42230, dtype: float64\n\n\n\n# subset the distance graph by the travel graph (remove destinations we dont need)\n# but this resets weights to 1\ndc_dist_adj = dc_dist.intersection(dc_flow_graph).adjacency\n\n# update with the old values\ndc_dist_adj.update(dc_dist.adjacency)\n\ndc_interaction[\"distance\"] = dc_dist.sparse.toarray().reshape(-1)\n\ndc_interaction['weight'] = dc_interaction['weight'].astype(int)\n\n/var/folders/j8/5bgcw6hs7cqcbbz48d6bsftw0000gp/T/ipykernel_31416/232420659.py:6: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[ 673.02448689 1714.42369324 1318.28681649 ... 7734.28131571 2519.49437645\n  989.25225739]' has dtype incompatible with int8, please explicitly cast to a compatible dtype first.\n  dc_dist_adj.update(dc_dist.adjacency)\n\n\n\n\n4.3.2 Contiguity Graph\n\ncontg = Graph.build_contiguity(dc)\n\n\ncontg\n\n&lt;Graph of 206 nodes and 1060 nonzero edges indexed by\n ['11001000101', '11001000102', '11001000201', '11001000202', '1100100030...]&gt;\n\n\nImagine you had a flow that moved from north to south like the map below. The ‘neighborhood’ of this flow might be the tracts surrounding the origin in the north, those surrounding the destination in the south, or a combination thereof.\n\nfocus_tracts = [\"11001007703\", \"11001001804\"]\n\ncontg.explore(dc.centroid)\n\nm = dc.explore(tiles=\"CartoDB Positron\", tooltip=[\"geoid\"])\ncontg.explore(\n    dc,\n    m=m,\n    focal=focus_tracts,\n    edge_kws=dict(color=\"red\"),\n    node_kws=dict(style_kwds=dict(radius=4, color=\"yellow\")),\n)\nl = gpd.GeoDataFrame(geometry=[LineString(dc.loc[focus_tracts].geometry.centroid.get_coordinates()[['x','y']].values)], crs=dc.crs)\nl.explore(m=m, color='red', style_kwds={'weight':6})\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n4.3.3 Spatial Graphs for Origin-Destination Flows\nthe contg Graph encodes flows as neighbors if the origin tracts share a border.\nbut we need to multiply that graph to get it into the correct dimensions to match our flow data. Following LeSage and Pace (2008) and Fischer and Griffith (2008) we do this via a Kronecker product between our flow and contiguity graphs to create the graph (\\(W\\)) used in the model.\n\n\n\nKronecker Product\n\n\n\\(G_{flow} \\otimes G_{cont}\\), where \\(\\otimes\\) is the Kronecker product of the flow graph and contiguity graphs that defines connectivity between origin and destination observations.\nIn this case observations are neighbors if:\n\nthere is a flow between o and d\nif o_i shares a border with o_j\nthree distinct possibilities depending on how the flow graph is ordered\n\norigin-centric weights\ndestination-centric weights\nOD-centric weights (union or sum of oW and dW)\n\n\ntake the Kronecker product of the two Graphs, then re-instantiate a new one\n\nkg = Graph.from_sparse(scipy.sparse.kron(dc_flow_graph.transform(\"b\").sparse, contg.sparse))\n\nour new graph now as the same length as our observation vector\n\nkg.n\n\n42436\n\n\n\ndc_interaction.shape[0]\n\n42436\n\n\nthis is an origin-centric ODW, so to get the destination-centric weights you’d do the transpose of the OD matrix (flow graph) first (LeSage and Pace 2008)\n\nkg.pct_nonzero\n\n1.3718439929404018\n\n\n\ncontg.pct_nonzero\n\n2.497879159204449\n\n\n\ndc_flow_graph.pct_nonzero\n\n54.9203506456782\n\n\nrow-standardize\n\nkg = kg.transform('r')\n\nspreg will only treat the Graph as a matrix, so the ordering of the sparse representation is all that matters, not the indices/labels; i.e. the Graph has the correct shape and order even though the indices of the Graph are different than those of the observations",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Spatial Interaction with Spatial Dependence</span>"
    ]
  },
  {
    "objectID": "notebooks/03_spatial_dependence.html#main-model-specification",
    "href": "notebooks/03_spatial_dependence.html#main-model-specification",
    "title": "4  Spatial Interaction with Spatial Dependence",
    "section": "4.4 Main Model Specification",
    "text": "4.4 Main Model Specification\n\n“Note in some cases yij = 0, indicating the absence of flows from i to j. This leads to the so-called zero problem, since the logarithm then is undefined. There are several pragmatic solutions to this problem, with adding a small constant to the zero elements of [yij ] being widely used. Here we added 0.08.” (Fischer and Griffith 2008)\n\nthat gives our \\(y\\) variable a distribution like this\n\ndc_interaction.weight.replace(0,0.08).apply(np.log).hist()\n\n\n\n\n\n\n\n\nAnother common transformation is to add 1 to every observation and take the log of that, i.e. take \\(log(x+1)\\) (this is setting \\(\\delta=1\\) in Equation 3.2).\n\ndc_interaction.weight.apply(np.log1p).hist()\n\n\n\n\n\n\n\n\nwe specify a log-linear model using formulaic to generate our \\(y\\) and \\(X\\) matrices, then pass these to different kinds of spatial econometric models\n\nform = \"np.log1p(weight) ~ 1+ np.log1p(n_total_pop_origin) + np.log1p(median_household_income_origin) + np.log1p(p_nonhisp_black_persons_origin) + np.log1p(n_total_pop_destination) + np.log1p(median_household_income_destination) + np.log1p(p_nonhisp_black_persons_destination) + np.log1p(distance)\"\n\n\nf = Formula(form)\n\n# mean-impute missing values for convenience\ny, x = f.get_model_matrix(\n    dc_interaction.fillna(dc_interaction.mean(numeric_only=True))\n)\n\n\ny\n\n\n\n\n\n\n\n\nnp.log1p(weight)\n\n\n\n\n0\n3.135494\n\n\n1\n3.178054\n\n\n2\n2.564949\n\n\n3\n0.000000\n\n\n4\n0.000000\n\n\n...\n...\n\n\n42431\n0.000000\n\n\n42432\n0.000000\n\n\n42433\n0.000000\n\n\n42434\n0.000000\n\n\n42435\n1.386294\n\n\n\n\n42436 rows × 1 columns",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Spatial Interaction with Spatial Dependence</span>"
    ]
  },
  {
    "objectID": "notebooks/03_spatial_dependence.html#spatial-lag-1",
    "href": "notebooks/03_spatial_dependence.html#spatial-lag-1",
    "title": "4  Spatial Interaction with Spatial Dependence",
    "section": "4.5 Spatial Lag",
    "text": "4.5 Spatial Lag\n\n4.5.1 Origin centric weights\n\nflow_lag = GM_Lag(y=y, x=x, w=kg, robust='white')\n\n\nprint(flow_lag.summary)\n\nREGRESSION RESULTS\n------------------\n\nSUMMARY OF OUTPUT: SPATIAL TWO STAGE LEAST SQUARES\n--------------------------------------------------\nData set            :     unknown\nWeights matrix      :     unknown\nDependent Variable  :np.log1p(weight)                Number of Observations:       42436\nMean dependent var  :      0.8921                Number of Variables   :           9\nS.D. dependent var  :      1.0715                Degrees of Freedom    :       42427\nPseudo R-squared    :      0.2190\nSpatial Pseudo R-squared:  0.1924\n\nWhite Standard Errors\n------------------------------------------------------------------------------------\n            Variable     Coefficient       Std.Error     z-Statistic     Probability\n------------------------------------------------------------------------------------\n            CONSTANT         1.13811         0.20426         5.57173         0.00000\nnp.log1p(n_total_pop_origin)         0.21307         0.00895        23.79478         0.00000\nnp.log1p(median_household_income_origin)         0.01194         0.00972         1.22762         0.21959\nnp.log1p(p_nonhisp_black_persons_origin)         0.07121         0.00503        14.15920         0.00000\nnp.log1p(n_total_pop_destination)        -0.20520         0.01272       -16.13689         0.00000\nnp.log1p(median_household_income_destination)         0.08630         0.01047         8.23858         0.00000\nnp.log1p(p_nonhisp_black_persons_destination)        -0.20024         0.00700       -28.60626         0.00000\n  np.log1p(distance)        -0.16735         0.00604       -27.69579         0.00000\n  W_np.log1p(weight)         0.46895         0.01376        34.08952         0.00000\n------------------------------------------------------------------------------------\nInstrumented: W_np.log1p(weight)\nInstruments: W_np.log1p(distance),\n             W_np.log1p(median_household_income_destination),\n             W_np.log1p(median_household_income_origin),\n             W_np.log1p(n_total_pop_destination),\n             W_np.log1p(n_total_pop_origin),\n             W_np.log1p(p_nonhisp_black_persons_destination),\n             W_np.log1p(p_nonhisp_black_persons_origin)\nWarning: Variable(s) ['Intercept'] removed for being constant.\n\nDIAGNOSTICS FOR SPATIAL DEPENDENCE\nTEST                              DF         VALUE           PROB\nAnselin-Kelejian Test             1        349.211           0.0000\n\nSPATIAL LAG MODEL IMPACTS\nImpacts computed using the 'simple' method.\n            Variable         Direct        Indirect          Total\nnp.log1p(n_total_pop_origin)         0.2131          0.1882          0.4012\nnp.log1p(median_household_income_origin)         0.0119          0.0105          0.0225\nnp.log1p(p_nonhisp_black_persons_origin)         0.0712          0.0629          0.1341\nnp.log1p(n_total_pop_destination)        -0.2052         -0.1812         -0.3864\nnp.log1p(median_household_income_destination)         0.0863          0.0762          0.1625\nnp.log1p(p_nonhisp_black_persons_destination)        -0.2002         -0.1768         -0.3771\n  np.log1p(distance)        -0.1673         -0.1478         -0.3151\n================================ END OF REPORT =====================================\n\n\n\nflow_lag.output\n\n\n\n\n\n\n\n\nvar_names\ncoefficients\nstd_err\nzt_stat\nprob\n\n\n\n\n0\nCONSTANT\n1.138105\n0.204264\n5.571726\n0.0\n\n\n1\nnp.log1p(n_total_pop_origin)\n0.213068\n0.008954\n23.794778\n0.0\n\n\n2\nnp.log1p(median_household_income_origin)\n0.011936\n0.009723\n1.227619\n0.21959\n\n\n3\nnp.log1p(p_nonhisp_black_persons_origin)\n0.071212\n0.005029\n14.159196\n0.0\n\n\n4\nnp.log1p(n_total_pop_destination)\n-0.2052\n0.012716\n-16.136889\n0.0\n\n\n5\nnp.log1p(median_household_income_destination)\n0.086296\n0.010475\n8.23858\n0.0\n\n\n6\nnp.log1p(p_nonhisp_black_persons_destination)\n-0.200238\n0.007\n-28.606256\n0.0\n\n\n7\nnp.log1p(distance)\n-0.167348\n0.006042\n-27.695788\n0.0\n\n\n8\nW_np.log1p(weight)\n0.468951\n0.013756\n34.089521\n0.0\n\n\n\n\n\n\n\n\npd.Series(flow_lag.u.flatten()).hist()\n\n\n\n\n\n\n\n\n\n\n4.5.2 Destination-centric weights\n\nkgd = Graph.from_sparse(scipy.sparse.kron(dc_flow_graph.transform(\"b\").sparse.transpose(), contg.sparse))\n\n\nkgd = kgd.transform('r')\n\n\nkgd.pct_nonzero\n\n1.3718439929404018\n\n\n\ndest_flow_lag = GM_Lag(y=y, x=x,  w=kgd)\n\n\nprint(dest_flow_lag.summary)\n\nREGRESSION RESULTS\n------------------\n\nSUMMARY OF OUTPUT: SPATIAL TWO STAGE LEAST SQUARES\n--------------------------------------------------\nData set            :     unknown\nWeights matrix      :     unknown\nDependent Variable  :np.log1p(weight)                Number of Observations:       42436\nMean dependent var  :      0.8921                Number of Variables   :           9\nS.D. dependent var  :      1.0715                Degrees of Freedom    :       42427\nPseudo R-squared    :      0.2144\nSpatial Pseudo R-squared:  0.1896\n\n------------------------------------------------------------------------------------\n            Variable     Coefficient       Std.Error     z-Statistic     Probability\n------------------------------------------------------------------------------------\n            CONSTANT         0.92005         0.19826         4.64061         0.00000\nnp.log1p(n_total_pop_origin)         0.21931         0.00992        22.09697         0.00000\nnp.log1p(median_household_income_origin)         0.01139         0.00997         1.14196         0.25347\nnp.log1p(p_nonhisp_black_persons_origin)         0.07036         0.00533        13.20419         0.00000\nnp.log1p(n_total_pop_destination)        -0.20374         0.00997       -20.43675         0.00000\nnp.log1p(median_household_income_destination)         0.09414         0.01000         9.41217         0.00000\nnp.log1p(p_nonhisp_black_persons_destination)        -0.20389         0.00570       -35.75831         0.00000\n  np.log1p(distance)        -0.16325         0.00520       -31.36543         0.00000\n  W_np.log1p(weight)         0.48389         0.01363        35.49697         0.00000\n------------------------------------------------------------------------------------\nInstrumented: W_np.log1p(weight)\nInstruments: W_np.log1p(distance),\n             W_np.log1p(median_household_income_destination),\n             W_np.log1p(median_household_income_origin),\n             W_np.log1p(n_total_pop_destination),\n             W_np.log1p(n_total_pop_origin),\n             W_np.log1p(p_nonhisp_black_persons_destination),\n             W_np.log1p(p_nonhisp_black_persons_origin)\nWarning: Variable(s) ['Intercept'] removed for being constant.\n\nDIAGNOSTICS FOR SPATIAL DEPENDENCE\nTEST                              DF         VALUE           PROB\nAnselin-Kelejian Test             1        440.134           0.0000\n\nSPATIAL LAG MODEL IMPACTS\nImpacts computed using the 'simple' method.\n            Variable         Direct        Indirect          Total\nnp.log1p(n_total_pop_origin)         0.2193          0.2056          0.4249\nnp.log1p(median_household_income_origin)         0.0114          0.0107          0.0221\nnp.log1p(p_nonhisp_black_persons_origin)         0.0704          0.0660          0.1363\nnp.log1p(n_total_pop_destination)        -0.2037         -0.1910         -0.3948\nnp.log1p(median_household_income_destination)         0.0941          0.0883          0.1824\nnp.log1p(p_nonhisp_black_persons_destination)        -0.2039         -0.1912         -0.3951\n  np.log1p(distance)        -0.1632         -0.1531         -0.3163\n================================ END OF REPORT =====================================\n\n\n\ndest_flow_lag.output\n\n\n\n\n\n\n\n\nvar_names\ncoefficients\nstd_err\nzt_stat\nprob\n\n\n\n\n0\nCONSTANT\n0.920051\n0.198261\n4.640612\n0.000003\n\n\n1\nnp.log1p(n_total_pop_origin)\n0.21931\n0.009925\n22.096967\n0.0\n\n\n2\nnp.log1p(median_household_income_origin)\n0.011387\n0.009972\n1.141963\n0.25347\n\n\n3\nnp.log1p(p_nonhisp_black_persons_origin)\n0.070364\n0.005329\n13.204186\n0.0\n\n\n4\nnp.log1p(n_total_pop_destination)\n-0.203745\n0.00997\n-20.436753\n0.0\n\n\n5\nnp.log1p(median_household_income_destination)\n0.094141\n0.010002\n9.412175\n0.0\n\n\n6\nnp.log1p(p_nonhisp_black_persons_destination)\n-0.20389\n0.005702\n-35.758313\n0.0\n\n\n7\nnp.log1p(distance)\n-0.163249\n0.005205\n-31.365431\n0.0\n\n\n8\nW_np.log1p(weight)\n0.483894\n0.013632\n35.496968\n0.0\n\n\n\n\n\n\n\n\n\n4.5.3 OD-centric weights\none “OD-graph” could be the union of the two; a flow is ‘neighbors’ with another flow if it is contiguous with either origin or destination points\n\nkg_od = kg.transform('b').union(kgd.transform('b'))\n\n\nkg_od = kg_od.transform('r')\n\n\nkg_od.pct_nonzero\n\n2.0139724628188382\n\n\n\nod_flow_lag = GM_Lag(y=y, x=x, w=kg_od)\n\n\nprint(od_flow_lag.summary)\n\nREGRESSION RESULTS\n------------------\n\nSUMMARY OF OUTPUT: SPATIAL TWO STAGE LEAST SQUARES\n--------------------------------------------------\nData set            :     unknown\nWeights matrix      :     unknown\nDependent Variable  :np.log1p(weight)                Number of Observations:       42436\nMean dependent var  :      0.8921                Number of Variables   :           9\nS.D. dependent var  :      1.0715                Degrees of Freedom    :       42427\nPseudo R-squared    :      0.2154\nSpatial Pseudo R-squared:  0.1904\n\n------------------------------------------------------------------------------------\n            Variable     Coefficient       Std.Error     z-Statistic     Probability\n------------------------------------------------------------------------------------\n            CONSTANT         1.04565         0.19744         5.29602         0.00000\nnp.log1p(n_total_pop_origin)         0.21780         0.00992        21.96064         0.00000\nnp.log1p(median_household_income_origin)         0.01041         0.00996         1.04450         0.29625\nnp.log1p(p_nonhisp_black_persons_origin)         0.07703         0.00532        14.47604         0.00000\nnp.log1p(n_total_pop_destination)        -0.20499         0.00996       -20.58275         0.00000\nnp.log1p(median_household_income_destination)         0.08989         0.00999         9.00130         0.00000\nnp.log1p(p_nonhisp_black_persons_destination)        -0.20309         0.00571       -35.58426         0.00000\n  np.log1p(distance)        -0.16724         0.00519       -32.21315         0.00000\n  W_np.log1p(weight)         0.47437         0.01338        35.46370         0.00000\n------------------------------------------------------------------------------------\nInstrumented: W_np.log1p(weight)\nInstruments: W_np.log1p(distance),\n             W_np.log1p(median_household_income_destination),\n             W_np.log1p(median_household_income_origin),\n             W_np.log1p(n_total_pop_destination),\n             W_np.log1p(n_total_pop_origin),\n             W_np.log1p(p_nonhisp_black_persons_destination),\n             W_np.log1p(p_nonhisp_black_persons_origin)\nWarning: Variable(s) ['Intercept'] removed for being constant.\n\nDIAGNOSTICS FOR SPATIAL DEPENDENCE\nTEST                              DF         VALUE           PROB\nAnselin-Kelejian Test             1        375.429           0.0000\n\nSPATIAL LAG MODEL IMPACTS\nImpacts computed using the 'simple' method.\n            Variable         Direct        Indirect          Total\nnp.log1p(n_total_pop_origin)         0.2178          0.1966          0.4144\nnp.log1p(median_household_income_origin)         0.0104          0.0094          0.0198\nnp.log1p(p_nonhisp_black_persons_origin)         0.0770          0.0695          0.1465\nnp.log1p(n_total_pop_destination)        -0.2050         -0.1850         -0.3900\nnp.log1p(median_household_income_destination)         0.0899          0.0811          0.1710\nnp.log1p(p_nonhisp_black_persons_destination)        -0.2031         -0.1833         -0.3864\n  np.log1p(distance)        -0.1672         -0.1509         -0.3182\n================================ END OF REPORT =====================================\n\n\n\nod_flow_lag.output\n\n\n\n\n\n\n\n\nvar_names\ncoefficients\nstd_err\nzt_stat\nprob\n\n\n\n\n0\nCONSTANT\n1.045648\n0.19744\n5.296021\n0.0\n\n\n1\nnp.log1p(n_total_pop_origin)\n0.217802\n0.009918\n21.960641\n0.0\n\n\n2\nnp.log1p(median_household_income_origin)\n0.010408\n0.009965\n1.044499\n0.296255\n\n\n3\nnp.log1p(p_nonhisp_black_persons_origin)\n0.07703\n0.005321\n14.476035\n0.0\n\n\n4\nnp.log1p(n_total_pop_destination)\n-0.20499\n0.009959\n-20.582747\n0.0\n\n\n5\nnp.log1p(median_household_income_destination)\n0.08989\n0.009986\n9.001304\n0.0\n\n\n6\nnp.log1p(p_nonhisp_black_persons_destination)\n-0.203087\n0.005707\n-35.584263\n0.0\n\n\n7\nnp.log1p(distance)\n-0.167245\n0.005192\n-32.213151\n0.0\n\n\n8\nW_np.log1p(weight)\n0.474372\n0.013376\n35.463697\n0.0\n\n\n\n\n\n\n\nInstead, we could take the sum of the two graphs, in which case you are neighbors when contiguous with either origin or destination points (same cardinalities as above), but the strength of the weight is 2x if you neighbor both origin and destination.\n\nkg_od = Graph.from_sparse(kg.transform('b').sparse + kgd.transform('b').sparse)\nkg_od = kg_od.transform('r')\n\n\nprint(od_flow_lag.summary)\n\nREGRESSION RESULTS\n------------------\n\nSUMMARY OF OUTPUT: SPATIAL TWO STAGE LEAST SQUARES\n--------------------------------------------------\nData set            :     unknown\nWeights matrix      :     unknown\nDependent Variable  :np.log1p(weight)                Number of Observations:       42436\nMean dependent var  :      0.8921                Number of Variables   :           9\nS.D. dependent var  :      1.0715                Degrees of Freedom    :       42427\nPseudo R-squared    :      0.2154\nSpatial Pseudo R-squared:  0.1904\n\n------------------------------------------------------------------------------------\n            Variable     Coefficient       Std.Error     z-Statistic     Probability\n------------------------------------------------------------------------------------\n            CONSTANT         1.04565         0.19744         5.29602         0.00000\nnp.log1p(n_total_pop_origin)         0.21780         0.00992        21.96064         0.00000\nnp.log1p(median_household_income_origin)         0.01041         0.00996         1.04450         0.29625\nnp.log1p(p_nonhisp_black_persons_origin)         0.07703         0.00532        14.47604         0.00000\nnp.log1p(n_total_pop_destination)        -0.20499         0.00996       -20.58275         0.00000\nnp.log1p(median_household_income_destination)         0.08989         0.00999         9.00130         0.00000\nnp.log1p(p_nonhisp_black_persons_destination)        -0.20309         0.00571       -35.58426         0.00000\n  np.log1p(distance)        -0.16724         0.00519       -32.21315         0.00000\n  W_np.log1p(weight)         0.47437         0.01338        35.46370         0.00000\n------------------------------------------------------------------------------------\nInstrumented: W_np.log1p(weight)\nInstruments: W_np.log1p(distance),\n             W_np.log1p(median_household_income_destination),\n             W_np.log1p(median_household_income_origin),\n             W_np.log1p(n_total_pop_destination),\n             W_np.log1p(n_total_pop_origin),\n             W_np.log1p(p_nonhisp_black_persons_destination),\n             W_np.log1p(p_nonhisp_black_persons_origin)\nWarning: Variable(s) ['Intercept'] removed for being constant.\n\nDIAGNOSTICS FOR SPATIAL DEPENDENCE\nTEST                              DF         VALUE           PROB\nAnselin-Kelejian Test             1        375.429           0.0000\n\nSPATIAL LAG MODEL IMPACTS\nImpacts computed using the 'simple' method.\n            Variable         Direct        Indirect          Total\nnp.log1p(n_total_pop_origin)         0.2178          0.1966          0.4144\nnp.log1p(median_household_income_origin)         0.0104          0.0094          0.0198\nnp.log1p(p_nonhisp_black_persons_origin)         0.0770          0.0695          0.1465\nnp.log1p(n_total_pop_destination)        -0.2050         -0.1850         -0.3900\nnp.log1p(median_household_income_destination)         0.0899          0.0811          0.1710\nnp.log1p(p_nonhisp_black_persons_destination)        -0.2031         -0.1833         -0.3864\n  np.log1p(distance)        -0.1672         -0.1509         -0.3182\n================================ END OF REPORT =====================================\n\n\n\nod_flow_lag.output\n\n\n\n\n\n\n\n\nvar_names\ncoefficients\nstd_err\nzt_stat\nprob\n\n\n\n\n0\nCONSTANT\n1.045648\n0.19744\n5.296021\n0.0\n\n\n1\nnp.log1p(n_total_pop_origin)\n0.217802\n0.009918\n21.960641\n0.0\n\n\n2\nnp.log1p(median_household_income_origin)\n0.010408\n0.009965\n1.044499\n0.296255\n\n\n3\nnp.log1p(p_nonhisp_black_persons_origin)\n0.07703\n0.005321\n14.476035\n0.0\n\n\n4\nnp.log1p(n_total_pop_destination)\n-0.20499\n0.009959\n-20.582747\n0.0\n\n\n5\nnp.log1p(median_household_income_destination)\n0.08989\n0.009986\n9.001304\n0.0\n\n\n6\nnp.log1p(p_nonhisp_black_persons_destination)\n-0.203087\n0.005707\n-35.584263\n0.0\n\n\n7\nnp.log1p(distance)\n-0.167245\n0.005192\n-32.213151\n0.0\n\n\n8\nW_np.log1p(weight)\n0.474372\n0.013376\n35.463697\n0.0",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Spatial Interaction with Spatial Dependence</span>"
    ]
  },
  {
    "objectID": "notebooks/03_spatial_dependence.html#spatial-error-1",
    "href": "notebooks/03_spatial_dependence.html#spatial-error-1",
    "title": "4  Spatial Interaction with Spatial Dependence",
    "section": "4.6 Spatial Error",
    "text": "4.6 Spatial Error\nthe error models take a really long time to estimate\n\n4.6.1 Origin-Centric\n\nflow_error_origin = GMM_Error(y=y, x=x, w=kg)\n\n\nprint(flow_error_origin.summary)\n\nREGRESSION RESULTS\n------------------\n\nSUMMARY OF OUTPUT: GM SPATIALLY WEIGHTED LEAST SQUARES (HET)\n------------------------------------------------------------\nData set            :     unknown\nWeights matrix      :     unknown\nDependent Variable  :np.log1p(weight)                Number of Observations:       42436\nMean dependent var  :      0.8921                Number of Variables   :           8\nS.D. dependent var  :      1.0715                Degrees of Freedom    :       42428\nPseudo R-squared    :      0.1715\nN. of iterations    :           1                Step1c computed       :          No\n\n------------------------------------------------------------------------------------\n            Variable     Coefficient       Std.Error     z-Statistic     Probability\n------------------------------------------------------------------------------------\n            CONSTANT         0.56346         0.20423         2.75895         0.00580\nnp.log1p(n_total_pop_origin)         0.21456         0.00891        24.06762         0.00000\nnp.log1p(median_household_income_origin)         0.00795         0.00984         0.80835         0.41889\nnp.log1p(p_nonhisp_black_persons_origin)         0.07338         0.00519        14.13295         0.00000\nnp.log1p(n_total_pop_destination)        -0.15311         0.01360       -11.25810         0.00000\nnp.log1p(median_household_income_destination)         0.14984         0.01078        13.89702         0.00000\nnp.log1p(p_nonhisp_black_persons_destination)        -0.22535         0.00724       -31.13522         0.00000\n  np.log1p(distance)        -0.17330         0.00611       -28.36196         0.00000\n              lambda         0.43320         0.00102       425.12538         0.00000\n------------------------------------------------------------------------------------\nWarning: Variable(s) ['Intercept'] removed for being constant.\n================================ END OF REPORT =====================================\n\n\n\nflow_error_origin.output\n\n\n\n\n\n\n\n\nvar_names\ncoefficients\nstd_err\nzt_stat\nprob\n\n\n\n\n0\nCONSTANT\n0.563463\n0.204231\n2.758949\n0.005799\n\n\n1\nnp.log1p(n_total_pop_origin)\n0.214562\n0.008915\n24.06762\n0.0\n\n\n2\nnp.log1p(median_household_income_origin)\n0.007952\n0.009837\n0.808354\n0.418887\n\n\n3\nnp.log1p(p_nonhisp_black_persons_origin)\n0.073376\n0.005192\n14.132946\n0.0\n\n\n4\nnp.log1p(n_total_pop_destination)\n-0.153111\n0.0136\n-11.258098\n0.0\n\n\n5\nnp.log1p(median_household_income_destination)\n0.14984\n0.010782\n13.89702\n0.0\n\n\n6\nnp.log1p(p_nonhisp_black_persons_destination)\n-0.225354\n0.007238\n-31.135217\n0.0\n\n\n7\nnp.log1p(distance)\n-0.173299\n0.00611\n-28.361959\n0.0\n\n\n8\nlambda\n0.433203\n0.001019\n425.125382\n0.0\n\n\n\n\n\n\n\n\n\n4.6.2 Destination-centric\n\nflow_error_dest = GMM_Error(y=y, x=x, w=kgd)\n\n\nprint(flow_error_dest.summary)\n\nREGRESSION RESULTS\n------------------\n\nSUMMARY OF OUTPUT: GM SPATIALLY WEIGHTED LEAST SQUARES (HET)\n------------------------------------------------------------\nData set            :     unknown\nWeights matrix      :     unknown\nDependent Variable  :np.log1p(weight)                Number of Observations:       42436\nMean dependent var  :      0.8921                Number of Variables   :           8\nS.D. dependent var  :      1.0715                Degrees of Freedom    :       42428\nPseudo R-squared    :      0.1715\nN. of iterations    :           1                Step1c computed       :          No\n\n------------------------------------------------------------------------------------\n            Variable     Coefficient       Std.Error     z-Statistic     Probability\n------------------------------------------------------------------------------------\n            CONSTANT         0.56128         0.20497         2.73832         0.00618\nnp.log1p(n_total_pop_origin)         0.21696         0.00897        24.19122         0.00000\nnp.log1p(median_household_income_origin)         0.00546         0.01003         0.54423         0.58628\nnp.log1p(p_nonhisp_black_persons_origin)         0.07677         0.00523        14.68281         0.00000\nnp.log1p(n_total_pop_destination)        -0.15614         0.01318       -11.84381         0.00000\nnp.log1p(median_household_income_destination)         0.15218         0.01086        14.00732         0.00000\nnp.log1p(p_nonhisp_black_persons_destination)        -0.22997         0.00737       -31.19187         0.00000\n  np.log1p(distance)        -0.17405         0.00615       -28.27823         0.00000\n              lambda         0.50877         0.00117       434.08837         0.00000\n------------------------------------------------------------------------------------\nWarning: Variable(s) ['Intercept'] removed for being constant.\n================================ END OF REPORT =====================================\n\n\n\nflow_error_dest.output\n\n\n\n\n\n\n\n\nvar_names\ncoefficients\nstd_err\nzt_stat\nprob\n\n\n\n\n0\nCONSTANT\n0.561276\n0.204971\n2.73832\n0.006175\n\n\n1\nnp.log1p(n_total_pop_origin)\n0.216964\n0.008969\n24.191224\n0.0\n\n\n2\nnp.log1p(median_household_income_origin)\n0.005457\n0.010026\n0.544231\n0.586282\n\n\n3\nnp.log1p(p_nonhisp_black_persons_origin)\n0.076774\n0.005229\n14.682813\n0.0\n\n\n4\nnp.log1p(n_total_pop_destination)\n-0.156139\n0.013183\n-11.843813\n0.0\n\n\n5\nnp.log1p(median_household_income_destination)\n0.152175\n0.010864\n14.00732\n0.0\n\n\n6\nnp.log1p(p_nonhisp_black_persons_destination)\n-0.229974\n0.007373\n-31.191871\n0.0\n\n\n7\nnp.log1p(distance)\n-0.174048\n0.006155\n-28.278234\n0.0\n\n\n8\nlambda\n0.50877\n0.001172\n434.088366\n0.0\n\n\n\n\n\n\n\n\n\n4.6.3 OD-Centric\n\nflow_error_od = GMM_Error(y=y, x=x, w=kg_od)\n\n\nprint(flow_error_od.summary)\n\nREGRESSION RESULTS\n------------------\n\nSUMMARY OF OUTPUT: GM SPATIALLY WEIGHTED LEAST SQUARES (HET)\n------------------------------------------------------------\nData set            :     unknown\nWeights matrix      :     unknown\nDependent Variable  :np.log1p(weight)                Number of Observations:       42436\nMean dependent var  :      0.8921                Number of Variables   :           8\nS.D. dependent var  :      1.0715                Degrees of Freedom    :       42428\nPseudo R-squared    :      0.1715\nN. of iterations    :           1                Step1c computed       :          No\n\n------------------------------------------------------------------------------------\n            Variable     Coefficient       Std.Error     z-Statistic     Probability\n------------------------------------------------------------------------------------\n            CONSTANT         0.56353         0.20413         2.76064         0.00577\nnp.log1p(n_total_pop_origin)         0.21591         0.00891        24.23514         0.00000\nnp.log1p(median_household_income_origin)         0.00649         0.00986         0.65821         0.51041\nnp.log1p(p_nonhisp_black_persons_origin)         0.07679         0.00515        14.90760         0.00000\nnp.log1p(n_total_pop_destination)        -0.15462         0.01346       -11.48887         0.00000\nnp.log1p(median_household_income_destination)         0.15089         0.01081        13.95301         0.00000\nnp.log1p(p_nonhisp_black_persons_destination)        -0.22738         0.00729       -31.21079         0.00000\n  np.log1p(distance)        -0.17427         0.00611       -28.50641         0.00000\n              lambda         0.45731         0.00098       468.34007         0.00000\n------------------------------------------------------------------------------------\nWarning: Variable(s) ['Intercept'] removed for being constant.\n================================ END OF REPORT =====================================\n\n\n\nflow_error_od.output\n\n\n\n\n\n\n\n\nvar_names\ncoefficients\nstd_err\nzt_stat\nprob\n\n\n\n\n0\nCONSTANT\n0.563534\n0.204132\n2.760642\n0.005769\n\n\n1\nnp.log1p(n_total_pop_origin)\n0.215913\n0.008909\n24.235136\n0.0\n\n\n2\nnp.log1p(median_household_income_origin)\n0.006487\n0.009855\n0.658206\n0.510406\n\n\n3\nnp.log1p(p_nonhisp_black_persons_origin)\n0.076789\n0.005151\n14.907596\n0.0\n\n\n4\nnp.log1p(n_total_pop_destination)\n-0.154617\n0.013458\n-11.488873\n0.0\n\n\n5\nnp.log1p(median_household_income_destination)\n0.15089\n0.010814\n13.953006\n0.0\n\n\n6\nnp.log1p(p_nonhisp_black_persons_destination)\n-0.227383\n0.007285\n-31.210786\n0.0\n\n\n7\nnp.log1p(distance)\n-0.174273\n0.006113\n-28.506414\n0.0\n\n\n8\nlambda\n0.457305\n0.000976\n468.340074\n0.0\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAs an alternative to the spatial econometric specifications illustrated above, Liao and Oshan (2025) recently described a different model that incorporates the “intervening opportunities” and “competing destinations” frameworks discussed in the spatial interaction literature by incorporating two additional terms \\(A_i\\) and \\(A_j\\) which represent accessibility measures at the origin and destination locations, respectively. In spatial econometric parlance, this approach is equivalent to a spatial lag of X (SLX) model with terms that include both origin-centric and destination-centric lagged X variables.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Spatial Interaction with Spatial Dependence</span>"
    ]
  },
  {
    "objectID": "notebooks/03_spatial_dependence.html#references",
    "href": "notebooks/03_spatial_dependence.html#references",
    "title": "4  Spatial Interaction with Spatial Dependence",
    "section": "4.7 References",
    "text": "4.7 References\n\n\n\n\nFischer, Manfred M., and Daniel A. Griffith. 2008. “Modeling Spatial Autocorrelation in Spatial Interaction Data: An Application to Patent Citation Data in the European Union.” Journal of Regional Science 48 (5): 969–89. https://doi.org/10.1111/j.1467-9787.2008.00572.x.\n\n\nLeSage, James P. 2014. “What Regional Scientists Need to Know About Spatial Econometrics.” SSRN Electronic Journal. https://doi.org/10.2139/ssrn.2420725.\n\n\nLeSage, James P., and Manfred M. Fischer. 2010. “Spatial Econometric Methods for Modeling Origin-Destination Flows.” In Handbook of Applied Spatial Analysis: Software Tools, Methods and Applications, edited by Manfred M. Fischer and Arthur Getis, 409–33. Berlin, Heidelberg: Springer. https://doi.org/10.1007/978-3-642-03647-7_20.\n\n\nLeSage, James P., Manfred M. Fischer, and Thomas Scherngell. 2007. “Knowledge Spillovers Across Europe: Evidence from a Poisson Spatial Interaction Model with Spatial Effects.” Papers in Regional Science 86 (3): 393–421. https://doi.org/10.1111/j.1435-5957.2007.00125.x.\n\n\nLeSage, James P., and Carlos Llano. 2013. “A Spatial Interaction Model with Spatially Structured Origin and Destination Effects.” Journal of Geographical Systems 15 (3): 265–89. https://doi.org/10.1007/s10109-013-0181-8.\n\n\nLeSage, James P., and R Kelley Pace. 2008. “Spatial Econometric Modeling Of Origin-Destination Flows.” Journal of Regional Science 48 (5): 941–67. https://doi.org/10.1111/j.1467-9787.2008.00573.x.\n\n\nLiao, Mengyu, and Taylor M. Oshan. 2025. “A Data‐Driven Approach to Spatial Interaction Models of Migration: Integrating and Refining the Theories of Competing Destinations and Intervening Opportunities.” Geographical Analysis, March. https://doi.org/10.1111/gean.70001.\n\n\nOrd, J K. 1975. “Estimation Methods for Models of Spatial Interaction.” Journal of the American Statistical Association 70 (349): 120–26. https://doi.org/10.1080/01621459.1975.10480272.\n\n\nThomas-Agnan, Christine, and James P. LeSage. 2014. “Spatial Econometric OD-Flow Models.” In Handbook of Regional Science, edited by Manfred M. Fischer and Peter Nijkamp, 1653–73. Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/10.1007/978-3-642-23430-9_87.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Spatial Interaction with Spatial Dependence</span>"
    ]
  }
]